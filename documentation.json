{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthOptional",
            "id": "interface-AuthOptional-dd70d53adfd8657b4840cbd8e31c0637508dc46100fd140f489d867ef724858940ddd801193b7b5ddec425e6893f0aa367333cbafba346b8d464da03b6c997cf",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthRequired {\r\n  correo: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n  recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Partial<AuthOptional>;\r\n\r\nexport class Auth {\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private recaptchaReactive: string;\r\n\r\n  constructor(properties: AuthProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): AuthProperties {\r\n    return {\r\n      correo: this.correo,\r\n      password: this.password,\r\n      recaptchaReactive: this.recaptchaReactive,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AuthRepository",
            "id": "interface-AuthRepository-56238b70131e1de1b69c0c4e6a621ece035bbbd1c3ea885470e7cce3ebba58dcbf2ef56499ac7f7ae8439ced11e3b8f85cca1fbb79c32536ac1080be831ff588",
            "file": "projects/sistema/src/app/core/domain/auth.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Auth } from './auth';\r\nimport { ITokens } from './tokens.interface';\r\n\r\nexport interface AuthRepository {\r\n  login(auth: Auth): Observable<ITokens>;\r\n  getNewAccessToken(refreshToken: string): Observable<ITokens>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "AuthRequired",
            "id": "interface-AuthRequired-dd70d53adfd8657b4840cbd8e31c0637508dc46100fd140f489d867ef724858940ddd801193b7b5ddec425e6893f0aa367333cbafba346b8d464da03b6c997cf",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthRequired {\r\n  correo: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n  recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Partial<AuthOptional>;\r\n\r\nexport class Auth {\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private recaptchaReactive: string;\r\n\r\n  constructor(properties: AuthProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): AuthProperties {\r\n    return {\r\n      correo: this.correo,\r\n      password: this.password,\r\n      recaptchaReactive: this.recaptchaReactive,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Base",
            "id": "interface-Base-25104afb12c691bd2ba7355c75de60c033dcfbf529e9dcfafa1eba7d2db0a5e0e739eafc1931e135f33359b8c1298a79e4864d30c56b0132c16fc3e22ebd059e",
            "file": "projects/sistema/src/app/shared/domain/base.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface Base<Entity> {\r\n  insert(entity: Entity): Observable<any>;\r\n\r\n  list(): Observable<any>;\r\n\r\n  listOne(id: number): Observable<any>;\r\n\r\n  update(id: number, entity: Entity): Observable<any>;\r\n\r\n  delete(id: number): Observable<any>;\r\n\r\n  page(page: number): Observable<any>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "CovidModel",
            "id": "interface-CovidModel-0610c3cab3f8b858ed81e8a4647e0b6b67eb101f2b8a4ab188e906cade3dd4bdd4235c5fc1fe07cc52defb8c7dcb987de4a91171ac7edf845b7570761da53421",
            "file": "projects/sistema/src/app/dashboard/domain/covid.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CovidModel {\r\n  provinceState?: string;\r\n  countryRegion: string;\r\n  lastUpdate: number;\r\n  lat?: number;\r\n  long?: number;\r\n  confirmed: number;\r\n  deaths: number;\r\n  recovered: any;\r\n  active: any;\r\n  admin2?: string;\r\n  fips?: string;\r\n  combinedKey: string;\r\n  incidentRate?: number;\r\n  peopleTested: any;\r\n  peopleHospitalized: any;\r\n  uid: number;\r\n  iso3?: string;\r\n  cases28Days?: number;\r\n  deaths28Days?: number;\r\n  iso2?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "admin2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cases28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "combinedKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirmed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "countryRegion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "deaths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deaths28Days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fips",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "incidentRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iso2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iso3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "peopleHospitalized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "peopleTested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "provinceState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "recovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CovidRepository",
            "id": "interface-CovidRepository-720e510e3145a421d32ca24cccc0d66226ba364ffc300e152fd17ac37d8a227f2ea297ef6fbabdaddb50cc39fccac34c6933fb7c56baaf93d33b3154309adf02",
            "file": "projects/sistema/src/app/dashboard/domain/covid.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { CovidModel } from './covid.model';\r\n\r\nexport interface CovidRepository {\r\n  getCovidData(): Observable<CovidModel[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "DriverOptional",
            "id": "interface-DriverOptional-c3c46552257b49e014f189f8a4c5eaaf0aacbc7b9f7130ed9dd7c111c73f743042ddb922acb2cfbbd7e0aca24795e0104832eac251670d75f4e746bf51323ffb",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverRequired {\r\n  nombre: string;\r\n}\r\n\r\nexport interface DriverOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> &\r\n  Partial<DriverOptional>;\r\n\r\nexport type DriverUpdate = Partial<{\r\n  nombre: string;\r\n}>;\r\n\r\nexport class Driver {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: DriverProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): DriverProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: DriverUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DriverRepository",
            "id": "interface-DriverRepository-4a85b2da7c91a2e453a8e12cbc6907c28e1917f55bf2a04b09a159e96f5441f40fee35840a6b3e9afdaf425b27ea3da4ac12a06f6b80974f9e2c7cc0172c6e46",
            "file": "projects/sistema/src/app/driver/domain/driver.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from '../../shared/domain/base.interface';\r\nimport { Driver } from './driver';\r\n\r\nexport interface DriverRepository extends Base<Driver> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "DriverRequired",
            "id": "interface-DriverRequired-c3c46552257b49e014f189f8a4c5eaaf0aacbc7b9f7130ed9dd7c111c73f743042ddb922acb2cfbbd7e0aca24795e0104832eac251670d75f4e746bf51323ffb",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverRequired {\r\n  nombre: string;\r\n}\r\n\r\nexport interface DriverOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> &\r\n  Partial<DriverOptional>;\r\n\r\nexport type DriverUpdate = Partial<{\r\n  nombre: string;\r\n}>;\r\n\r\nexport class Driver {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: DriverProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): DriverProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: DriverUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Graph",
            "id": "interface-Graph-9a8340c0a8703cf33d6eba030062f243e4fdadeb3668c7023513c17a5cd3ab10cc57781f4365877c1b47047f0ca342490b80b164f48e7fe53b942b1e1927faca",
            "file": "projects/sistema/src/app/dashboard/domain/graph.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Graph {\r\n  name: string;\r\n  value: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IApplication",
            "id": "interface-IApplication-31d5f0c37b0fcd02e561162e6ad4d77467925f670d57a70b88f3efb8c520e340560416bfc29387ccdb6d7b087e745ede0e908bb39633ce90e375907ad9e1eeff",
            "file": "projects/sistema/src/app/shared/application/interface-application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nexport interface IApplication<Entity> {\r\n  insert(entity: Entity): Observable<any>;\r\n  list(): Observable<any>;\r\n  listOne(id: number): Observable<any>;\r\n  update(id: number, entity: Entity): Observable<any>;\r\n  delete(id: number): Observable<any>;\r\n  page(page: number): Observable<any>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Icon",
            "id": "interface-Icon-09dba6c0e6256cdd1b727bf9d22839e0dd2394ad54b37a6e766d2aeb93429bfd8e6420d5ca84f9b610812f01f88c3c93b2e11c0c38491810b0e4fa278baa2c61",
            "file": "projects/sistema/src/app/shared/services/icon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface Icon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconService {\r\n  private listIcons: Icon[] = [\r\n    { name: 'driver', path: '../assets/icons/conductor.svg' },\r\n    { name: 'history', path: '../assets/icons/historia.svg' },\r\n    { name: 'medic', path: '../assets/icons/medico.svg' },\r\n    { name: 'user', path: '../assets/icons/programador.svg' },\r\n    { name: 'dashboard', path: '../assets/icons/tablero.svg' },\r\n    { name: 'logo', path: '../assets/icons/logo.svg' },\r\n    { name: 'excel', path: '../assets/icons/excel.svg' },\r\n    { name: 'pdf', path: '../assets/icons/pdf.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    for (let icon of this.listIcons) {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDriverApplication",
            "id": "interface-IDriverApplication-f8b14aef52f488c7040f65a168196e67e6558de383eb33f8e793534242e3bdba793663f4fd104df1931532b160fcce6eaa7215073985e57310ff88b0fed5ffbd",
            "file": "projects/sistema/src/app/driver/application/driver.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from '../../shared/application/interface-application';\r\nimport { Driver } from '../domain/driver';\r\n\r\nexport interface IDriverApplication extends IApplication<Driver> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication"
        },
        {
            "name": "ILayout",
            "id": "interface-ILayout-010c8d0d1d80439d74f8c22972256fffa2534d393079a36df0894c34a1afabec4b48138f0c34baadbd9c2cef4b0a178597829e2875cf4bcb754f90040f53f47a",
            "file": "projects/sistema/src/app/config/injections/layout/interfaces/layout.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILayout {\r\n  hideHeader: boolean;\r\n  hideMenu: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "hideHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hideMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMedicApplication",
            "id": "interface-IMedicApplication-85edfceb71f1ae68140a6a9dbe2fda21eb01976ae78bc90a88f8edf2db1df4fdc1f2c0eebb7472589682c5a6ac94df209fb91103f633d176dbb7a8859b3e7300",
            "file": "projects/sistema/src/app/medic/application/medic.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from '../../shared/application/interface-application';\r\nimport { Medic } from '../domain/medic';\r\n\r\nexport interface IMedicApplication extends IApplication<Medic> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication"
        },
        {
            "name": "IResultPage",
            "id": "interface-IResultPage-a68b2294c34effe5593cfa01901695b80a932ca64dcc48b193075ea2002ec725a46b1d2ae2430796bdcc95d535fed01cdd80df4ae81bb52896beae6870cf84ec",
            "file": "projects/sistema/src/app/shared/interface/result-page.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IResultPage<Entity> {\r\n  records: Entity[];\r\n  totalRecords: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRoleApplication",
            "id": "interface-IRoleApplication-2fc7c17995f619300e0f83bcf0ebfc62c27ebdc30e6d5159794f69aba4928d374215fdbb6fbd695db683ae6fb595cb42a3ce7b56043f2dada750342721098a4d",
            "file": "projects/sistema/src/app/role/application/role.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IApplication } from '../../shared/application/interface-application';\r\nimport { Role } from '../domain/role';\r\n\r\nexport interface IRoleApplication extends IApplication<Role> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IApplication"
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-f684637b9e6b17d89e67e90f3815dd0257565b8c8a057f5a918841aa7171be8f9f3e4e1435c1c1531481fec2a74ff95f2089d767f1d6199ebb0bf8254bf2af28",
            "file": "projects/sistema/src/app/core/domain/tokens.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MedicOptional",
            "id": "interface-MedicOptional-61db1ebd0dec1b8f8b3539b02204f82f57423173498108791a7e9e4b0fdee46bfca31e55fca491ead8becf367327848084eedf8d91aa251adc82e0be87b7c099",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicRequired {\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}\r\n\r\nexport interface MedicOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOptional>;\r\n\r\nexport type MedicUpdate = Partial<{\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}>;\r\n\r\nexport class Medic {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private apellido: string;\r\n  private segundo_nombre: string;\r\n  private cmp: string;\r\n  private correo: string;\r\n  private dni: string;\r\n  private foto: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: MedicProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): MedicProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      apellido: this.apellido,\r\n      segundo_nombre: this.segundo_nombre,\r\n      cmp: this.cmp,\r\n      correo: this.correo,\r\n      dni: this.dni,\r\n      foto: this.foto,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: MedicUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MedicRepository",
            "id": "interface-MedicRepository-979a11fd2f5c982c04797b10241608ee8fa100fdfb79d5d21a4301100a1d1d17a1e8aa4792943735779fba300d700ff2cf785c60c6030c7916cc41708e915374",
            "file": "projects/sistema/src/app/medic/domain/medic.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from '../../shared/domain/base.interface';\r\nimport { Medic } from './medic';\r\n\r\nexport interface MedicRepository extends Base<Medic> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "MedicRequired",
            "id": "interface-MedicRequired-61db1ebd0dec1b8f8b3539b02204f82f57423173498108791a7e9e4b0fdee46bfca31e55fca491ead8becf367327848084eedf8d91aa251adc82e0be87b7c099",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicRequired {\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}\r\n\r\nexport interface MedicOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOptional>;\r\n\r\nexport type MedicUpdate = Partial<{\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}>;\r\n\r\nexport class Medic {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private apellido: string;\r\n  private segundo_nombre: string;\r\n  private cmp: string;\r\n  private correo: string;\r\n  private dni: string;\r\n  private foto: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: MedicProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): MedicProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      apellido: this.apellido,\r\n      segundo_nombre: this.segundo_nombre,\r\n      cmp: this.cmp,\r\n      correo: this.correo,\r\n      dni: this.dni,\r\n      foto: this.foto,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: MedicUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Menu",
            "id": "interface-Menu-19220fd0b839828636dbef1bf2d0680cc0f52a311207ab7b4d23fc38ccf79a19d7c5fb5c94aa41d1b9954f6b396e66f808a14ed85733eca8ba6f8664c6ef533b",
            "file": "projects/sistema/src/app/shared/services/menu.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport interface Menu {\r\n  title: string;\r\n  url: string;\r\n  icon: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  private menu: Menu[];\r\n\r\n  constructor() {\r\n    this.menu = [\r\n      { title: 'Dashboard', url: '/dashboard', icon: 'dashboard' },\r\n      { title: 'User', url: '/user', icon: 'user' },\r\n      { title: 'Medic', url: '/medic', icon: 'medic' },\r\n      { title: 'Driver', url: '/driver', icon: 'driver' },\r\n      { title: 'History', url: '/history', icon: 'history' },\r\n    ];\r\n  }\r\n\r\n  getItems(): Menu[] {\r\n    return [...this.menu];\r\n    //return Object.assign([], this.menu);\r\n  }\r\n\r\n  getDataPath(currentPath: string): Menu {\r\n    const menu = this.menu.find((el: Menu) => el.url === currentPath);\r\n    return menu as Menu;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaColumn",
            "id": "interface-MetaColumn-edb482426715c6dcf372cbf2cc5910cad49f3d32cde60a759ed7b0016b1d6b0630bf73ad104f27540c5c66a6548b3cea7f51cd1f0e9ae49ab692d3f049745536",
            "file": "projects/sistema/src/app/shared/interfaces/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaColumn {\r\n  title: string;\r\n  field: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleEssential",
            "id": "interface-RoleEssential-55a964a2845f917d97718c55d9a4a71ccc4f4464276558db28971fa9396213649a81184f93c5a59392c82b009eea118495ed6118b3205ea0418d1746ac988147",
            "file": "projects/sistema/src/app/role/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RoleEssential {\r\n  readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n  readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>;\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>;\r\n\r\nexport class Role {\r\n  private readonly id: number;\r\n  private rol: string;\r\n\r\n  constructor(properties: RoleProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): RoleProperties {\r\n    return {\r\n      id: this.id,\r\n      rol: this.rol,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "rol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleOptional",
            "id": "interface-RoleOptional-55a964a2845f917d97718c55d9a4a71ccc4f4464276558db28971fa9396213649a81184f93c5a59392c82b009eea118495ed6118b3205ea0418d1746ac988147",
            "file": "projects/sistema/src/app/role/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RoleEssential {\r\n  readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n  readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>;\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>;\r\n\r\nexport class Role {\r\n  private readonly id: number;\r\n  private rol: string;\r\n\r\n  constructor(properties: RoleProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): RoleProperties {\r\n    return {\r\n      id: this.id,\r\n      rol: this.rol,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RoleRepository",
            "id": "interface-RoleRepository-dca57139830a57216074638516f0619b8428cf61603d561da04c5555351f13332c9b61975894b977043703994ace2e18b7f7b9148af7718be283a5a5afa95206",
            "file": "projects/sistema/src/app/role/domain/role.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from '../../shared/domain/base.interface';\r\nimport { Role } from './role';\r\n\r\nexport interface RoleRepository extends Base<Role> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "SocketRepository",
            "id": "interface-SocketRepository-f87b25bb16d70e043180f3540b94c89417a02303253050f97e23c793da1df3d772cf42c77e6147ea6c99df00406319f5afaa5b05c9388304e575102ac9c80ee0",
            "file": "projects/sistema/src/app/dashboard/domain/socket.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Graph } from './graph.interface';\r\n\r\nexport interface SocketRepository {\r\n  listen(eventName: string): Observable<Graph[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "StorageRepository",
            "id": "interface-StorageRepository-768626e81a2eab4c11921d3f5ab48cf003ad1cc2cab9c77bacd510d89e2f47508b4490113c9fdc47dd558ca0adc52daedabe3b17c77f7ba3d2d37ab40bc31e01",
            "file": "projects/sistema/src/app/core/domain/storage.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StorageRepository {\r\n  setStorage(property: string, value: string): void;\r\n  getStorage(property: string): string | null;\r\n  clear(): void;\r\n  getFieldInToken(field: string): string | string[] | null;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | [] | null",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "UserOptional",
            "id": "interface-UserOptional-1aa6d792c7f654edfdddb3301562c88249eed438048bdeefed235280bffbc0682c4a8df255d8044d375db373aa63ab352a05727868c50364ff59ead2cf853e56",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRequired {\r\n  nombre: string;\r\n  correo: string;\r\n  password: string;\r\n  roles: any;\r\n}\r\n\r\nexport interface UserOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type UserUpdate = Partial<{\r\n  nombre: string;\r\n  password: string;\r\n  roles: any;\r\n}>;\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOptional>;\r\n\r\nexport class User {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private activo: boolean;\r\n  private roles: any;\r\n\r\n  constructor(properties: UserProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): UserProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      correo: this.correo,\r\n      password: this.password,\r\n      activo: this.activo,\r\n      roles: this.roles,\r\n    };\r\n  }\r\n\r\n  update(fields: UserUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserRepository",
            "id": "interface-UserRepository-60c2ea750fcafb2c599847a75d3a42adb73ac8bc7628ffda48c82a0b7ccc273d47c39950ce1865d08d18df92a921fcbbff3a5dbe05689374fa50cb092b24315f",
            "file": "projects/sistema/src/app/user/domain/user.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Base } from '../../shared/domain/base.interface';\r\nimport { User } from './user';\r\n\r\nexport interface UserRepository extends Base<User> {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Base"
        },
        {
            "name": "UserRequired",
            "id": "interface-UserRequired-1aa6d792c7f654edfdddb3301562c88249eed438048bdeefed235280bffbc0682c4a8df255d8044d375db373aa63ab352a05727868c50364ff59ead2cf853e56",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserRequired {\r\n  nombre: string;\r\n  correo: string;\r\n  password: string;\r\n  roles: any;\r\n}\r\n\r\nexport interface UserOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type UserUpdate = Partial<{\r\n  nombre: string;\r\n  password: string;\r\n  roles: any;\r\n}>;\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOptional>;\r\n\r\nexport class User {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private activo: boolean;\r\n  private roles: any;\r\n\r\n  constructor(properties: UserProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): UserProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      correo: this.correo,\r\n      password: this.password,\r\n      activo: this.activo,\r\n      roles: this.roles,\r\n    };\r\n  }\r\n\r\n  update(fields: UserUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthApplication",
            "id": "injectable-AuthApplication-53b9daf1130d336edd3ef51f81eee552117789bbe4a37a01743c1098e3bb36d8f2e0f2811a3bfec80e1f3affed8cd82ddfc90996c1d3f6b6d727eed2d79c73c7",
            "file": "projects/sistema/src/app/core/application/auth.application.ts",
            "properties": [
                {
                    "name": "userLogged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMessageError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "userAuthenticated",
                    "args": [
                        {
                            "name": "response",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { UtilsService } from '../../shared/services/utils.service';\r\nimport { Auth } from '../domain/auth';\r\nimport { AuthRepository } from '../domain/auth.repository';\r\nimport { ITokens } from '../domain/tokens.interface';\r\nimport { AuthInfrastructure } from '../infrastructure/auth.infrastructure';\r\nimport { StorageApplication } from './storage.application';\r\n\r\n@Injectable()\r\nexport class AuthApplication {\r\n  private userLogged = false;\r\n\r\n  constructor(\r\n    @Inject(AuthInfrastructure) private readonly authRepository: AuthRepository,\r\n    private readonly storageApplication: StorageApplication,\r\n    private readonly router: Router,\r\n    private utilsService: UtilsService\r\n  ) {}\r\n\r\n  login(auth: Auth) {\r\n    return this.authRepository.login(auth).subscribe({\r\n      next: this.userAuthenticated.bind(this),\r\n      error: this.showMessageError.bind(this),\r\n    });\r\n  }\r\n\r\n  private userAuthenticated(response: ITokens) {\r\n    this.storageApplication.setField('accessToken', response.accessToken);\r\n    this.storageApplication.setField('refreshToken', response.refreshToken);\r\n\r\n    this.userLogged = true;\r\n\r\n    this.router.navigate(['/dashboard']);\r\n  }\r\n\r\n  private showMessageError(error: any) {\r\n    this.utilsService.showNotification('Credenciales inválidas');\r\n  }\r\n\r\n  get isUserLogged(): boolean {\r\n    const accessToken = this.storageApplication.getField('accessToken');\r\n    const refreshToken = this.storageApplication.getField('refreshToken');\r\n\r\n    return (!!accessToken && !!refreshToken) || this.userLogged ? true : false;\r\n  }\r\n\r\n  logout() {\r\n    this.userLogged = false;\r\n    this.storageApplication.clear();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  getNewAccessToken(refreshToken: string): Observable<ITokens> {\r\n    return this.authRepository.getNewAccessToken(refreshToken);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isUserLogged": {
                    "name": "isUserLogged",
                    "getSignature": {
                        "name": "isUserLogged",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthInfrastructure",
            "id": "injectable-AuthInfrastructure-f5c2031fd5bf5f225cf29a049ad321c03d177463804870652113c1fddc895a4cd3011e812b70aba106515c1a9728fdbcbacdd16c2882bacfc250c35935aca0b7",
            "file": "projects/sistema/src/app/core/infrastructure/auth.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "Auth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Auth } from '../domain/auth';\r\nimport { AuthRepository } from '../domain/auth.repository';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ITokens } from '../domain/tokens.interface';\r\nimport { environment } from 'projects/sistema/src/environments/environment';\r\n\r\n@Injectable()\r\nexport class AuthInfrastructure implements AuthRepository {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  login(auth: Auth): Observable<ITokens> {\r\n    return this.http.post<ITokens>(`${environment.apiUrl}/users/login`, auth);\r\n  }\r\n  getNewAccessToken(refreshToken: string): Observable<ITokens> {\r\n    return this.http.get<ITokens>(\r\n      `${environment.apiUrl}/users/refresh/${refreshToken}`\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidApplication",
            "id": "injectable-CovidApplication-839dce66d3c61f876eca63819c5d7e09ce9545b03d2886d0a9982f61b5a7839c4e979502173ef2cdfbc5fa04d7e4ca2836eed8f8f09b04cf8a634908b5cd5dfb",
            "file": "projects/sistema/src/app/dashboard/application/covid.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { CovidModel } from '../domain/covid.model';\r\nimport { CovidRepository } from '../domain/covid.repository';\r\nimport { Graph } from '../domain/graph.interface';\r\nimport { CovidInfrastructure } from '../infrastructure/covid.infrastructure';\r\n\r\n@Injectable()\r\nexport class CovidApplication {\r\n  constructor(\r\n    @Inject(CovidInfrastructure) private readonly repository: CovidRepository\r\n  ) {}\r\n\r\n  getCovidData(): Observable<Graph[]> {\r\n    return this.repository.getCovidData().pipe(\r\n      map((data: CovidModel[]) =>\r\n        data.map((covid: CovidModel) => ({\r\n          name: covid.countryRegion,\r\n          value: covid.confirmed,\r\n        }))\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "CovidRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CovidInfrastructure",
            "id": "injectable-CovidInfrastructure-e34edcf06f35b065d45927f40e8ce812347e075dd22ad480be7b770ea0eb12fb3ac07498377d6c73b7e01260fd8740ecc1b28662035eb120517df6b6b46aec3c",
            "file": "projects/sistema/src/app/dashboard/infrastructure/covid.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CovidModel[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { CovidModel } from '../domain/covid.model';\r\nimport { CovidRepository } from '../domain/covid.repository';\r\n\r\n@Injectable()\r\nexport class CovidInfrastructure implements CovidRepository {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  getCovidData(): Observable<CovidModel[]> {\r\n    return this.http\r\n      .get<CovidModel[]>('/api/confirmed')\r\n      .pipe(map((data: CovidModel[]) => data.slice(0, 30)));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DriverApplication",
            "id": "injectable-DriverApplication-1bae407ab6192ef8962acbe07ac02f37f0bb5a687c37913989c0ed6a7459cc27081d679733bf3d55bbda4f4b9b70796e3d0914d7e11f5f70edcfbeaaa39227a0",
            "file": "projects/sistema/src/app/driver/application/driver.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BaseApplication } from '../../shared/application/base-application';\r\nimport { Driver } from '../domain/driver';\r\nimport { DriverRepository } from '../domain/driver.repository';\r\nimport { DriverInfrastructure } from '../infrastructure/driver.infrastructure';\r\n\r\n@Injectable()\r\nexport class DriverApplication extends BaseApplication<\r\n  Driver,\r\n  DriverRepository\r\n> {\r\n  constructor(\r\n    @Inject(DriverInfrastructure)\r\n    private readonly driverRepository: DriverRepository\r\n  ) {\r\n    super(driverRepository);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driverRepository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "driverRepository",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "DriverInfrastructure",
            "id": "injectable-DriverInfrastructure-66d483731cb400f6e9c509ddca8096466175e45430626da9045748236c30ebc36c5f8bcb07ad4395d8efb2e63f374bd65726ba51d862588ae97f8f70cfae30bd",
            "file": "projects/sistema/src/app/driver/infrastructure/driver.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Driver } from '../domain/driver';\r\nimport { DriverRepository } from '../domain/driver.repository';\r\nimport { BaseInfrastructure } from '../../shared/infrastructure/base-infrastructure';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DriverInfrastructure\r\n  extends BaseInfrastructure<Driver>\r\n  implements DriverRepository\r\n{\r\n  constructor(http: HttpClient) {\r\n    super(http, 'drivers');\r\n    this.httpClient = http;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfrastructure",
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-09dba6c0e6256cdd1b727bf9d22839e0dd2394ad54b37a6e766d2aeb93429bfd8e6420d5ca84f9b610812f01f88c3c93b2e11c0c38491810b0e4fa278baa2c61",
            "file": "projects/sistema/src/app/shared/services/icon.service.ts",
            "properties": [
                {
                    "name": "listIcons",
                    "defaultValue": "[\r\n    { name: 'driver', path: '../assets/icons/conductor.svg' },\r\n    { name: 'history', path: '../assets/icons/historia.svg' },\r\n    { name: 'medic', path: '../assets/icons/medico.svg' },\r\n    { name: 'user', path: '../assets/icons/programador.svg' },\r\n    { name: 'dashboard', path: '../assets/icons/tablero.svg' },\r\n    { name: 'logo', path: '../assets/icons/logo.svg' },\r\n    { name: 'excel', path: '../assets/icons/excel.svg' },\r\n    { name: 'pdf', path: '../assets/icons/pdf.svg' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Icon[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface Icon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconService {\r\n  private listIcons: Icon[] = [\r\n    { name: 'driver', path: '../assets/icons/conductor.svg' },\r\n    { name: 'history', path: '../assets/icons/historia.svg' },\r\n    { name: 'medic', path: '../assets/icons/medico.svg' },\r\n    { name: 'user', path: '../assets/icons/programador.svg' },\r\n    { name: 'dashboard', path: '../assets/icons/tablero.svg' },\r\n    { name: 'logo', path: '../assets/icons/logo.svg' },\r\n    { name: 'excel', path: '../assets/icons/excel.svg' },\r\n    { name: 'pdf', path: '../assets/icons/pdf.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    for (let icon of this.listIcons) {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LayoutService",
            "id": "injectable-LayoutService-b7a151ab8e65c8927cc2e9825b1f8077df8d3386903b50a9ad032e5014f6b4a448b3dc5fe1cf8ae213f1d4745d755f4485532f75178215a548a514524528d4c1",
            "file": "projects/sistema/src/app/config/injections/layout/services/layout.service.ts",
            "properties": [
                {
                    "name": "configSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ILayout>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { ILayout } from '../interfaces/layout.interface';\r\nimport { LAYOUT_TOKEN } from '../tokens/layout.token';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LayoutService {\r\n  configSubject: BehaviorSubject<ILayout>;\r\n\r\n  constructor(@Inject(LAYOUT_TOKEN) private config: ILayout) {\r\n    this.configSubject = new BehaviorSubject<ILayout>(config);\r\n  }\r\n\r\n  set configuration(config: any) {\r\n    this.configSubject.next(config);\r\n  }\r\n\r\n  get configuration(): Observable<ILayout> {\r\n    return this.configSubject.asObservable();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ILayout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "setSignature": {
                        "name": "configuration",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configuration",
                        "type": "",
                        "returnType": "Observable<ILayout>",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "MedicApplication",
            "id": "injectable-MedicApplication-6b816a48e9a1850a19f470cd09568c966dea1417ec2d3a802effda28391925b03d580ae60135115a3786219f9b1dc424711cd2c6ff26c95fef89a26e7bc72dbc",
            "file": "projects/sistema/src/app/medic/application/medic.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BaseApplication } from '../../shared/application/base-application';\r\nimport { Medic } from '../domain/medic';\r\nimport { MedicRepository } from '../domain/medic.repository';\r\nimport { MedicInfrastructure } from '../infrastructure/medic.infrastructure';\r\n\r\n@Injectable()\r\nexport class MedicApplication extends BaseApplication<Medic, MedicRepository> {\r\n  constructor(\r\n    @Inject(MedicInfrastructure)\r\n    private readonly medicRepository: MedicRepository\r\n  ) {\r\n    super(medicRepository);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicRepository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "medicRepository",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "MedicInfrastructure",
            "id": "injectable-MedicInfrastructure-ad3152a0ccf64252a65e7fad61a982722d9eeb16d4326edc118e4301caf3a7644b9a4ca8450e77918d32dc0cda6c8365b3777bfa1f5317fba39492ba5d49913e",
            "file": "projects/sistema/src/app/medic/infrastructure/medic.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Medic } from '../domain/medic';\r\nimport { MedicRepository } from '../domain/medic.repository';\r\nimport { BaseInfrastructure } from '../../shared/infrastructure/base-infrastructure';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MedicInfrastructure\r\n  extends BaseInfrastructure<Medic>\r\n  implements MedicRepository\r\n{\r\n  constructor(http: HttpClient) {\r\n    super(http, 'medics');\r\n    this.httpClient = http;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfrastructure",
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-19220fd0b839828636dbef1bf2d0680cc0f52a311207ab7b4d23fc38ccf79a19d7c5fb5c94aa41d1b9954f6b396e66f808a14ed85733eca8ba6f8664c6ef533b",
            "file": "projects/sistema/src/app/shared/services/menu.service.ts",
            "properties": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDataPath",
                    "args": [
                        {
                            "name": "currentPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Menu",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Menu[]",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport interface Menu {\r\n  title: string;\r\n  url: string;\r\n  icon: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  private menu: Menu[];\r\n\r\n  constructor() {\r\n    this.menu = [\r\n      { title: 'Dashboard', url: '/dashboard', icon: 'dashboard' },\r\n      { title: 'User', url: '/user', icon: 'user' },\r\n      { title: 'Medic', url: '/medic', icon: 'medic' },\r\n      { title: 'Driver', url: '/driver', icon: 'driver' },\r\n      { title: 'History', url: '/history', icon: 'history' },\r\n    ];\r\n  }\r\n\r\n  getItems(): Menu[] {\r\n    return [...this.menu];\r\n    //return Object.assign([], this.menu);\r\n  }\r\n\r\n  getDataPath(currentPath: string): Menu {\r\n    const menu = this.menu.find((el: Menu) => el.url === currentPath);\r\n    return menu as Menu;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        },
        {
            "name": "Paginator",
            "id": "injectable-Paginator-d9840494450de3928ce01688e9e862e97a5f375cbc4e54c9ce67e880632cf34fd9ed37cc899d2b0cc0dfb7ecb969bc2c14c8e45198dafcaa36bc3a46ec7b655b",
            "file": "projects/sistema/src/app/shared/services/paginator.service.ts",
            "properties": [
                {
                    "name": "firstPageLabel",
                    "defaultValue": "'PRIMERA PÁGINA'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "'Items por página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "lastPageLabel",
                    "defaultValue": "'ÚLTIMA PÁGINA'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "'SIGUIENTE PÁGINAS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "'PÁGINA ANTERIOR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        158
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\n@Injectable()\r\nexport class Paginator extends MatPaginatorIntl {\r\n  override itemsPerPageLabel = 'Items por página';\r\n  override nextPageLabel = 'SIGUIENTE PÁGINAS';\r\n  override previousPageLabel = 'PÁGINA ANTERIOR';\r\n  override firstPageLabel = 'PRIMERA PÁGINA';\r\n  override lastPageLabel = 'ÚLTIMA PÁGINA';\r\n\r\n  override getRangeLabel = (\r\n    page: number,\r\n    pageSize: number,\r\n    length: number\r\n  ): string => {\r\n    if (length === 0 || pageSize === 0) {\r\n      return '0 de ' + length;\r\n    }\r\n\r\n    length = Math.max(length);\r\n    const start = page * pageSize;\r\n    const end =\r\n      start < length ? Math.min(start + pageSize, length) : start + pageSize;\r\n\r\n    return `${start + 1} - ${end} de ${length}`;\r\n  };\r\n}\r\n",
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "RoleApplication",
            "id": "injectable-RoleApplication-26ff0c2550440e8c26faf7d7ef9015154fd962ae611de267228ccb9432e0d917a2322a4ef017dcbad5f45e967df294f9ed57623f108264db7d2ec1ee64b147a4",
            "file": "projects/sistema/src/app/role/application/role.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BaseApplication } from '../../shared/application/base-application';\r\nimport { Role } from '../domain/role';\r\nimport { RoleRepository } from '../domain/role.repository';\r\nimport { RoleInfrastructure } from '../infrastructure/role.infrastructure';\r\n\r\n@Injectable()\r\nexport class RoleApplication extends BaseApplication<Role, RoleRepository> {\r\n  constructor(\r\n    @Inject(RoleInfrastructure)\r\n    private readonly roleRepository: RoleRepository\r\n  ) {\r\n    super(roleRepository);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "roleRepository",
                        "type": "RoleRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "roleRepository",
                        "type": "RoleRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "RoleInfrastructure",
            "id": "injectable-RoleInfrastructure-1b638cafd265b5eec86d551648904aef0159150ccf75cb90fbe712d1955f46883c649fb61e408f78181d38d631d976754b6d575ee139a08a17f84bbf6a70dbf4",
            "file": "projects/sistema/src/app/role/infrastructure/role.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BaseInfrastructure } from '../../shared/infrastructure/base-infrastructure';\r\nimport { Role } from '../domain/role';\r\n\r\n@Injectable()\r\nexport class RoleInfrastructure\r\n  extends BaseInfrastructure<Role>\r\n  implements RoleInfrastructure\r\n{\r\n  constructor(http: HttpClient) {\r\n    super(http, 'roles');\r\n    this.httpClient = http;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfrastructure",
            "type": "injectable"
        },
        {
            "name": "SocketApplication",
            "id": "injectable-SocketApplication-fb28d26264405960fec218e4c5191c25b2990fb465460101e75495f35b33c21169f7b566fb84ada874103ab98ec5b754ed1d2901cdc5fa20b830362027533258",
            "file": "projects/sistema/src/app/dashboard/application/socket.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Graph } from '../domain/graph.interface';\r\nimport { SocketRepository } from '../domain/socket.repository';\r\nimport { SocketInfrastructure } from '../infrastructure/socker.infrastructure';\r\n\r\n@Injectable()\r\nexport class SocketApplication {\r\n  constructor(@Inject(SocketInfrastructure) private socket: SocketRepository) {}\r\n\r\n  listen(eventName: string): Observable<Graph[]> {\r\n    return this.socket.listen(eventName);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketInfrastructure",
            "id": "injectable-SocketInfrastructure-cfdb089d7740adbc16601824081129d5736260216fe471b24deb50a75472bd1b68d9abc31e680cc78b9a487e9047d1acb6f2849dec707793936b614cad28ed7c",
            "file": "projects/sistema/src/app/dashboard/infrastructure/socker.infrastructure.ts",
            "properties": [
                {
                    "name": "socket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "io.Socket",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Graph[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "eventName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { Graph } from '../domain/graph.interface';\r\nimport { SocketRepository } from '../domain/socket.repository';\r\nimport * as io from 'socket.io-client';\r\n\r\n@Injectable()\r\nexport class SocketInfrastructure implements SocketRepository {\r\n  private socket: io.Socket;\r\n\r\n  constructor() {\r\n    this.socket = io.connect('https://p7inv.sse.codesandbox.io/');\r\n  }\r\n\r\n  listen(eventName: string): Observable<Graph[]> {\r\n    return new Observable((observer: Observer<Graph[]>) => {\r\n      this.socket.on(eventName, (data: Graph[]) => observer.next(data));\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "StorageApplication",
            "id": "injectable-StorageApplication-d992dbe19a860b4aac2fc992f4813cc0ca4c1a1916a4508edcf871d36dcce1b5b266795a4a8fd3ae1bf6146fce56cec882219a119b909b7b6db4baeafa97091d",
            "file": "projects/sistema/src/app/core/application/storage.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getField",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | [] | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setField",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { StorageRepository } from '../domain/storage.repository';\r\nimport { StorageInfrastructure } from '../infrastructure/storage.infrastructure';\r\n\r\n@Injectable()\r\nexport class StorageApplication {\r\n  constructor(\r\n    @Inject(StorageInfrastructure) private readonly storage: StorageRepository\r\n  ) {}\r\n\r\n  setField(property: string, value: string): void {\r\n    this.storage.setStorage(property, value);\r\n  }\r\n\r\n  getField(property: string): string | null {\r\n    return this.storage.getStorage(property);\r\n  }\r\n\r\n  getFieldInToken(field: string): string | string[] | null {\r\n    return this.storage.getFieldInToken(field);\r\n  }\r\n\r\n  clear(): void {\r\n    this.storage.clear();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageInfrastructure",
            "id": "injectable-StorageInfrastructure-bd46798df7a52873b16fa7b5bdb0249ceed5a6836ff9e87c803b0b7d577d3ece64d6f5a9baaa7c90cdbb668a4067b93c419b90d0280784362a563c557e2c8cc6",
            "file": "projects/sistema/src/app/core/infrastructure/storage.infrastructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | []",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { StorageRepository } from '../domain/storage.repository';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n@Injectable()\r\nexport class StorageInfrastructure implements StorageRepository {\r\n  setStorage(property: string, value: string): void {\r\n    sessionStorage.setItem(property, value);\r\n  }\r\n  getStorage(property: string): string | null {\r\n    return sessionStorage.getItem(property);\r\n  }\r\n  clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n  getFieldInToken(field: string): string | string[] {\r\n    const accessToken = sessionStorage.getItem('accessToken');\r\n    const payload = jwtDecode(accessToken);\r\n\r\n    return payload[field];\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "UserApplication",
            "id": "injectable-UserApplication-78ada28e9247ce323010c822259e8c85ed13a4ab2da648f469b888af6b95cf9fc2150a51f5c36a4e16bc444c2254dca1de42e7e8d8ccdc5e127dbc8fb4f08c8b",
            "file": "projects/sistema/src/app/user/application/user.application.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseApplication"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { User } from '../domain/user';\r\nimport { UserRepository } from '../domain/user.repository';\r\nimport { UserInfrastructure } from '../infrastructure/user.infrastructure';\r\nimport { BaseApplication } from '../../shared/application/base-application';\r\n@Injectable()\r\nexport class UserApplication extends BaseApplication<User, UserRepository> {\r\n  constructor(\r\n    @Inject(UserInfrastructure) private readonly userRepository: UserRepository\r\n  ) {\r\n    super(userRepository);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "userRepository",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseApplication",
            "type": "injectable"
        },
        {
            "name": "UserInfrastructure",
            "id": "injectable-UserInfrastructure-52968e4db97f088674a7a12e7c6384861d21ad770247e526b8f29b33234c2f513376519ff02f1b778e3f4c5e2a106197265b8e6e6ddad60200e40836f8556dec",
            "file": "projects/sistema/src/app/user/infrastructure/user.infrastructure.ts",
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfrastructure"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BaseInfrastructure } from '../../shared/infrastructure/base-infrastructure';\r\nimport { User } from '../domain/user';\r\nimport { UserRepository } from '../domain/user.repository';\r\n\r\n@Injectable()\r\nexport class UserInfrastructure\r\n  extends BaseInfrastructure<User>\r\n  implements UserRepository\r\n{\r\n  constructor(http: HttpClient) {\r\n    super(http, 'users');\r\n    this.httpClient = http;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfrastructure",
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-5e25ef5253334ff41da257649f9292759575a7ca23ad040f1a28b30f2b75ce6c70f6d47d68c618203118f4435abf82e98286522935367d1e031abfd3c5955adb",
            "file": "projects/sistema/src/app/shared/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "dtoExcel",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sheetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sheetName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToPdf",
                    "args": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "records",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateColum",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ text: string; }",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "style",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePdf",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateRowData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partial<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolums",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partial<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolums",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "{ headerLeft: { fontFamily: string; fontSize: string; height: number; color: string; }; subHeaderLeft: { fontFamily: string; fontSize: number; height: number; color: string; }; titleReport: { fontFamily: string; fontSize: number; height: number; color: string; }; header: { ...; }; }",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "generateTableData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: any; body: any; }; }",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metacolumns",
                            "type": "MetaColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateTableHeader",
                    "args": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ margin: {}; table: { widths: {}; body: {}; }; }",
                    "typeParameters": [
                        "Entity"
                    ],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Entity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataUrl",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataUrl",
                    "args": [
                        {
                            "name": "pathLogo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pathLogo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showConfirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ConfirmComponent } from '../components/confirm/confirm.component';\r\nimport { MetaColumn } from '../interfaces/metacolumn.interface';\r\nimport * as XLSX from 'xlsx';\r\n\r\ndeclare var require: any;\r\n\r\nconst pdfMake = require('pdfmake/build/pdfmake.js');\r\nconst pdfFonts = require('pdfmake/build/vfs_fonts.js');\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\n@Injectable()\r\nexport class UtilsService {\r\n  constructor(\r\n    private readonly dialog: MatDialog,\r\n    private readonly notification: MatSnackBar\r\n  ) {}\r\n\r\n  showModalWindow(\r\n    classComponent: any,\r\n    options: { [s: string]: string | number | boolean | object }\r\n  ): MatDialogRef<any> {\r\n    return this.dialog.open(classComponent, options);\r\n  }\r\n\r\n  showConfirm(message: string = '') {\r\n    const reference = this.dialog.open(ConfirmComponent, {\r\n      width: '340px',\r\n      disableClose: true,\r\n    });\r\n\r\n    if (message) {\r\n      reference.componentInstance.messageToConfirm = message;\r\n    }\r\n\r\n    return reference.afterClosed();\r\n  }\r\n\r\n  showNotification(message: string) {\r\n    this.notification.open(message, '', {\r\n      duration: 3000,\r\n    });\r\n  }\r\n\r\n  exportToExcel<Entity>(\r\n    records: Entity[],\r\n    metacolumns: MetaColumn[],\r\n    filename: string,\r\n    sheetName: string\r\n  ) {\r\n    const result = this.dtoExcel(records, metacolumns);\r\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet([]);\r\n    XLSX.utils.sheet_add_json(ws, result);\r\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, sheetName);\r\n    XLSX.writeFile(wb, `${filename}.xlsx`);\r\n  }\r\n\r\n  private dtoExcel<Entity>(records: Entity[], metacolumns: MetaColumn[]) {\r\n    return records.map((item: Entity) => {\r\n      const newElement = {};\r\n      for (const prop in item) {\r\n        const metaData = metacolumns.find((el) => el.field === prop);\r\n        if (metaData) {\r\n          newElement[metaData.title] = item[prop];\r\n        }\r\n      }\r\n\r\n      return newElement;\r\n    });\r\n  }\r\n\r\n  async exportToPdf<Entity>(\r\n    records: Entity[],\r\n    metacolumns: MetaColumn[],\r\n    filename: string,\r\n    title: string\r\n  ) {\r\n    const dataUrl = await this.getDataUrl('/assets/img/logo.jpg');\r\n\r\n    const dataFormatted = {\r\n      pageSize: 'A4',\r\n      pageOrientation: 'portrait',\r\n      pageMargins: [20, 20, 20, 20],\r\n      content: [\r\n        this.generateTableHeader(records, dataUrl, title.toUpperCase()),\r\n        this.generateTableData(records, metacolumns),\r\n      ],\r\n      styles: this.generateStyles(),\r\n    };\r\n\r\n    this.generatePdf(dataFormatted, filename);\r\n  }\r\n\r\n  private generateTableHeader<Entity>(\r\n    data: Entity[],\r\n    dataUrl: any,\r\n    title: string\r\n  ) {\r\n    return {\r\n      margin: [0, 0, 0, 15],\r\n      table: {\r\n        widths: [120, 'auto', 50, 'auto'],\r\n        body: [\r\n          [\r\n            {\r\n              borderWidth: ['1px', '1px', '1px', '1px'],\r\n              borderColor: ['#000', '#000', '#000', '#000'],\r\n              border: [false, false, true, false],\r\n              width: 100,\r\n              image: dataUrl,\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: [\r\n                this.generateColum('Channel', 'headerLeft'),\r\n                this.generateColum('Av. De La República 3645', 'subHeaderLeft'),\r\n                this.generateColum('San Isidro, Lima Perú', 'subHeaderLeft'),\r\n                this.generateColum('Tel: (591) 222-2222', 'subHeaderLeft'),\r\n                this.generateColum('info@channel.com', 'subHeaderLeft'),\r\n                this.generateColum('www.channel.com', 'subHeaderLeft'),\r\n              ],\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: '',\r\n            },\r\n            {\r\n              border: [false, false, false, false],\r\n              text: title,\r\n              style: 'titleReport',\r\n            },\r\n          ],\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  private generateTableData<Entity>(data: Entity[], metacolumns: MetaColumn[]) {\r\n    const body = data\r\n      .map((el) => {\r\n        const newElement = {};\r\n        Object.keys(el).forEach((key) => {\r\n          const metaData = metacolumns.find((el) => el.field === key);\r\n          if (metaData) {\r\n            newElement[metaData.field] = el[key];\r\n          }\r\n        });\r\n        return newElement;\r\n      })\r\n      .map((el) =>\r\n        Object.keys(el).map((prop) =>\r\n          this.generateRowData(el, metacolumns, prop)\r\n        )\r\n      );\r\n\r\n    const quantityCols = metacolumns.length;\r\n    const widths = Array.from(Array(quantityCols).keys()).map(\r\n      (el) => Math.floor(100 / quantityCols) + '%'\r\n    );\r\n\r\n    const rows = [];\r\n    metacolumns.forEach((el) => {\r\n      const row = [\r\n        {\r\n          border: [false, false, false, false],\r\n          text: el.title,\r\n          style: 'header',\r\n        },\r\n      ];\r\n\r\n      rows.push(row);\r\n    });\r\n\r\n    body.unshift(rows);\r\n\r\n    return {\r\n      margin: [0, 0, 0, 15],\r\n      table: {\r\n        widths,\r\n        body,\r\n      },\r\n    };\r\n  }\r\n\r\n  private generateRowData<Entity>(\r\n    data: Partial<Entity>,\r\n    metacolums: MetaColumn[],\r\n    key: string\r\n  ) {\r\n    const column = metacolums.find((el) => el.field === key);\r\n    if (column) {\r\n      return [\r\n        {\r\n          border: [false, false, false, false],\r\n          text: data[key],\r\n        },\r\n      ];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private generatePdf(dataFormatted: any, filename: string) {\r\n    const docGenerated = pdfMake.createPdf(dataFormatted);\r\n    docGenerated.download(`${filename}.pdf`);\r\n  }\r\n\r\n  private async getDataUrl(pathLogo: string) {\r\n    const blob = await fetch(pathLogo).then((r) => r.blob());\r\n    const dataUrl = await new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n\r\n    return dataUrl;\r\n  }\r\n\r\n  private generateStyles() {\r\n    return {\r\n      headerLeft: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: '13',\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n      subHeaderLeft: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 10,\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n      titleReport: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 15,\r\n        height: 16,\r\n        color: '#3c3b40',\r\n      },\r\n      header: {\r\n        fontFamily: 'Verdana',\r\n        fontSize: 13,\r\n        height: 14,\r\n        color: '#3c3b40',\r\n        bold: true,\r\n      },\r\n    };\r\n  }\r\n\r\n  private generateColum(text: string, style: any = null) {\r\n    const column = {\r\n      text: text + '\\n',\r\n    };\r\n\r\n    if (style) {\r\n      column['style'] = style;\r\n    }\r\n\r\n    return column;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-0d65e2f551f77f016ff92097560f7894a99fd7c8f1bded2cb7a6cb0f2b8a666d97c5801b91fd0b54e4377102c9960a9f7672321dbd6fcd91aae2a7d4baa5d275",
            "file": "projects/sistema/src/app/shared/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean | Promise | Observable",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validUserLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, CanLoad } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthApplication } from '../../core/application/auth.application';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationGuard implements CanActivate, CanLoad {\r\n  constructor(private readonly auth: AuthApplication) {}\r\n\r\n  canActivate(): boolean | Promise<boolean> | Observable<boolean> {\r\n    return this.validUserLogged();\r\n  }\r\n\r\n  canLoad(): boolean {\r\n    return this.validUserLogged();\r\n  }\r\n\r\n  private validUserLogged(): boolean {\r\n    const isLogged = this.auth.isUserLogged;\r\n    if (!isLogged) {\r\n      this.auth.logout();\r\n    }\r\n\r\n    return isLogged;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-38261294847b324c5f7dde0cd467667b4140117d5beff1f8912490a7c62a0aa5fa8f093f8efbcb4c28f319c0f6c9f4e7dc895cc71b62ad61cc95fff9f0211d74",
            "file": "projects/sistema/src/app/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handlerErrorBackend",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { catchError, mergeMap, retry, throwError, Observable, of } from 'rxjs';\r\nimport { AuthApplication } from '../../core/application/auth.application';\r\nimport { StorageApplication } from '../../core/application/storage.application';\r\nimport { ITokens } from '../../core/domain/tokens.interface';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private readonly storage: StorageApplication,\r\n    private readonly injector: Injector\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const accessToken = this.storage.getField('accessToken');\r\n    const clonedRequest = req.clone({\r\n      headers: req.headers.append('Authorization', `Bearer ${accessToken}`),\r\n    });\r\n\r\n    return next.handle(clonedRequest).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        let errorMessage = '';\r\n\r\n        if (error.error instanceof ErrorEvent) {\r\n          // client-side error\r\n          errorMessage = `Error: ${error.error.message}`;\r\n        } else {\r\n          // server-side error\r\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n          return this.handlerErrorBackend(error, req, next);\r\n        }\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  handlerErrorBackend(\r\n    error: HttpErrorResponse,\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<any> {\r\n    const auth = this.injector.get(AuthApplication);\r\n\r\n    if (error.status === 409) {\r\n      const refreshToken = this.storage.getField('refreshToken');\r\n\r\n      return auth.getNewAccessToken(refreshToken).pipe(\r\n        retry(3),\r\n        mergeMap((tokens: ITokens) => {\r\n          this.storage.setField('accessToken', tokens.accessToken);\r\n          this.storage.setField('refreshToken', tokens.refreshToken);\r\n\r\n          const clonedRequest = req.clone({\r\n            headers: req.headers.append(\r\n              'Authorization',\r\n              `Bearer ${tokens.accessToken}`\r\n            ),\r\n          });\r\n\r\n          return next.handle(clonedRequest);\r\n        })\r\n      );\r\n    } else if (error.status === 401) {\r\n      auth.logout();\r\n    }\r\n\r\n    return throwError(() => new Error('Unauthorized'));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Auth",
            "id": "class-Auth-dd70d53adfd8657b4840cbd8e31c0637508dc46100fd140f489d867ef724858940ddd801193b7b5ddec425e6893f0aa367333cbafba346b8d464da03b6c997cf",
            "file": "projects/sistema/src/app/core/domain/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface AuthRequired {\r\n  correo: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthOptional {\r\n  recaptchaReactive: string;\r\n}\r\n\r\nexport type AuthProperties = Required<AuthRequired> & Partial<AuthOptional>;\r\n\r\nexport class Auth {\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private recaptchaReactive: string;\r\n\r\n  constructor(properties: AuthProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): AuthProperties {\r\n    return {\r\n      correo: this.correo,\r\n      password: this.password,\r\n      recaptchaReactive: this.recaptchaReactive,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "AuthProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "AuthProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "AuthProperties",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthFactory",
            "id": "class-AuthFactory-0dcde66f1d7faa2472a7358a0113525c48355bfbd8e5323f9f13bcd7be62345785d78e966eca07f010a54d65e5d70876cb1866aca97b40ff54ddbf948101b192",
            "file": "projects/sistema/src/app/core/domain/auth.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Auth, AuthProperties } from './auth';\r\n\r\nexport class AuthFactory {\r\n  static create(correo: string, password: string): Auth {\r\n    const recaptchaReactive: string = 'abc';\r\n    const authProperties: AuthProperties = {\r\n      correo,\r\n      password,\r\n      recaptchaReactive,\r\n    };\r\n\r\n    if (correo.trim() === '') {\r\n      throw new Error('Correo no puede ser vacío');\r\n    }\r\n\r\n    if (password.trim() === '') {\r\n      throw new Error('Password no puede ser vacío');\r\n    }\r\n\r\n    return new Auth(authProperties);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Auth",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseApplication",
            "id": "class-BaseApplication-8a4ac71156b2ce6b74022e19e467b208c604588b898f09e16e7ca8ec55d73594147823029fb8e051736756928e38325e26c1308f62844dd8df1d5cfd2f07ae14",
            "file": "projects/sistema/src/app/shared/application/base-application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Base } from '../domain/base.interface';\r\n\r\nexport abstract class BaseApplication<Entity, Repository extends Base<Entity>> {\r\n  constructor(private readonly repository: Repository) {}\r\n\r\n  insert(entity: Entity) {\r\n    return this.repository.insert(entity);\r\n  }\r\n\r\n  list() {\r\n    return this.repository.list();\r\n  }\r\n\r\n  listOne(id: number) {\r\n    return this.repository.listOne(id);\r\n  }\r\n\r\n  update(id: number, entity: Entity) {\r\n    return this.repository.update(id, entity);\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.repository.delete(id);\r\n  }\r\n\r\n  page(page: number) {\r\n    return this.repository.page(page);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "Repository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "Repository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseComponent",
            "id": "class-BaseComponent-8453d2c67b54ed9bc8655ad1c2fbda911c83ae293d05cf8e0591974c103f43c8137ef59299de50549a5ef789184897184e2dbb6795d2534e94b48db45fca299b",
            "file": "projects/sistema/src/app/shared/components/base/base-component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IApplication } from '../../application/interface-application';\r\nimport { IResultPage } from '../../interface/result-page.interface';\r\nimport { MetaColumn } from '../../interfaces/metacolumn.interface';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\nenum TypeExport {\r\n  EXCEL = 'excel',\r\n  PDF = 'pdf',\r\n}\r\n\r\nexport abstract class BaseComponent<\r\n  Entity,\r\n  Application extends IApplication<Entity>,\r\n  Modal\r\n> {\r\n  abstract listFields: string[];\r\n  abstract metaColumns: MetaColumn[];\r\n\r\n  quantityRecords: number;\r\n  currentPage: number = 0;\r\n  pageSize: number = environment.pageSize;\r\n\r\n  protected filename: string = 'data';\r\n  protected sheetName: string = 'Sheet1';\r\n  protected titleReport: string = 'Título reporte';\r\n\r\n  private application: Application;\r\n  protected dataSource: any[] = [];\r\n\r\n  constructor(\r\n    application: Application,\r\n    protected utilsService: UtilsService,\r\n    private context: any\r\n  ) {\r\n    this.application = application;\r\n    this.getRecordsByPage(0);\r\n  }\r\n\r\n  getRecordsByPage(page: number): void {\r\n    this.application\r\n      .page(page)\r\n      .subscribe({ next: this.fillDataSource.bind(this) });\r\n    this.currentPage = page;\r\n  }\r\n\r\n  private fillDataSource(result: IResultPage<Entity>) {\r\n    this.dataSource = result.records;\r\n    this.quantityRecords = result.totalRecords;\r\n  }\r\n\r\n  protected delete(row: any) {\r\n    this.utilsService\r\n      .showConfirm('¿Está seguro de eliminar el registro?')\r\n      .subscribe((response: boolean) => {\r\n        if (response) {\r\n          this.application.delete(row.id).subscribe(() => {\r\n            this.getRecordsByPage(this.currentPage);\r\n            this.utilsService.showNotification('Registro eliminado');\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  protected showModalWindow(row: any = null) {\r\n    const reference: MatDialogRef<Modal> = this.utilsService.showModalWindow(\r\n      this.context,\r\n      {\r\n        disableClose: true,\r\n        panelClass: 'form-modal-medic',\r\n        data: row,\r\n      }\r\n    );\r\n\r\n    reference.afterClosed().subscribe((response: any) => {\r\n      if (!response) {\r\n        return;\r\n      }\r\n\r\n      if (response.id) {\r\n        this.application.update(response.id, response.record).subscribe(() => {\r\n          this.getRecordsByPage(this.currentPage);\r\n          this.utilsService.showNotification('Registro actualizado');\r\n        });\r\n      } else {\r\n        this.application.insert(response.record).subscribe(() => {\r\n          this.getRecordsByPage(this.currentPage);\r\n          this.utilsService.showNotification('Registro insertado');\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  protected export(type: string) {\r\n    this.application.list().subscribe((records: Entity[]) => {\r\n      if (type === TypeExport.EXCEL) {\r\n        this.utilsService.exportToExcel(\r\n          records,\r\n          this.metaColumns,\r\n          this.filename,\r\n          this.sheetName\r\n        );\r\n      } else if (type === TypeExport.PDF) {\r\n        this.utilsService.exportToPdf(\r\n          records,\r\n          this.metaColumns,\r\n          this.filename,\r\n          this.titleReport\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "filename",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "listFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "metaColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Título reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseInfrastructure",
            "id": "class-BaseInfrastructure-215c4577d6044d0a9923ad82185fa6b5b6203862bba823c7e90baef72eb4834edbc5fc0443dc06941f323db5e93d6eaa1cc7637edcd08d3a7bdbde4eac03fac4",
            "file": "projects/sistema/src/app/shared/infrastructure/base-infrastructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from 'projects/sistema/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { IResultPage } from '../interface/result-page.interface';\r\n\r\nexport abstract class BaseInfrastructure<Entity> {\r\n  protected httpClient: HttpClient;\r\n\r\n  constructor(private http: HttpClient, private readonly endpoint: string) {}\r\n\r\n  insert(entity: Entity): Observable<any> {\r\n    return this.http.post(`${environment.apiUrl}/${this.endpoint}`, entity);\r\n  }\r\n  list(): Observable<any> {\r\n    return this.http.get(`${environment.apiUrl}/${this.endpoint}`);\r\n  }\r\n  listOne(id: number) {\r\n    return this.http.get(`${environment.apiUrl}/${this.endpoint}/${id}`);\r\n  }\r\n  update(id: number, entity: Entity) {\r\n    return this.http.put(\r\n      `${environment.apiUrl}/${this.endpoint}/${id}`,\r\n      entity\r\n    );\r\n  }\r\n  delete(id: number) {\r\n    return this.http.delete(`${environment.apiUrl}/${this.endpoint}/${id}`);\r\n  }\r\n  page(page: number): Observable<IResultPage<Entity>> {\r\n    return this.http.get<IResultPage<Entity>>(\r\n      `${environment.apiUrl}/${this.endpoint}/page/${page}/${environment.pageSize}`\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "endpoint",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endpoint",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "httpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "page",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResultPage<Entity>>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "Entity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Driver",
            "id": "class-Driver-c3c46552257b49e014f189f8a4c5eaaf0aacbc7b9f7130ed9dd7c111c73f743042ddb922acb2cfbbd7e0aca24795e0104832eac251670d75f4e746bf51323ffb",
            "file": "projects/sistema/src/app/driver/domain/driver.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface DriverRequired {\r\n  nombre: string;\r\n}\r\n\r\nexport interface DriverOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type DriverProperties = Required<DriverRequired> &\r\n  Partial<DriverOptional>;\r\n\r\nexport type DriverUpdate = Partial<{\r\n  nombre: string;\r\n}>;\r\n\r\nexport class Driver {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: DriverProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): DriverProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: DriverUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "DriverProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "DriverProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "DriverProperties",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "DriverUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "DriverUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DriverFactory",
            "id": "class-DriverFactory-8fc0bde6ea641a58854c04055b8fdc92bfab4fb31e5cdd7a4fc69669eab6c44474ed6df0d911da1c424a6f8e08fc90126968025c61923440b7aacdad4112121d",
            "file": "projects/sistema/src/app/driver/domain/driver.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Driver, DriverProperties } from './driver';\r\nexport class DriverFactory {\r\n  create(nombre: string) {\r\n    const DriverProperties: DriverProperties = {\r\n      nombre,\r\n    };\r\n\r\n    if (nombre.trim() === '') {\r\n      throw new Error('Nombre no puede ser vacío');\r\n    }\r\n\r\n    return new Driver(DriverProperties);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Medic",
            "id": "class-Medic-61db1ebd0dec1b8f8b3539b02204f82f57423173498108791a7e9e4b0fdee46bfca31e55fca491ead8becf367327848084eedf8d91aa251adc82e0be87b7c099",
            "file": "projects/sistema/src/app/medic/domain/medic.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface MedicRequired {\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}\r\n\r\nexport interface MedicOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type MedicProperties = Required<MedicRequired> & Partial<MedicOptional>;\r\n\r\nexport type MedicUpdate = Partial<{\r\n  nombre: string;\r\n  apellido: string;\r\n  segundo_nombre: string;\r\n  cmp: string;\r\n  correo: string;\r\n  dni: string;\r\n  foto: string;\r\n}>;\r\n\r\nexport class Medic {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private apellido: string;\r\n  private segundo_nombre: string;\r\n  private cmp: string;\r\n  private correo: string;\r\n  private dni: string;\r\n  private foto: string;\r\n  private activo: boolean;\r\n\r\n  constructor(properties: MedicProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): MedicProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      apellido: this.apellido,\r\n      segundo_nombre: this.segundo_nombre,\r\n      cmp: this.cmp,\r\n      correo: this.correo,\r\n      dni: this.dni,\r\n      foto: this.foto,\r\n      activo: this.activo,\r\n    };\r\n  }\r\n\r\n  update(fields: MedicUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "MedicProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "MedicProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "MedicProperties",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "MedicUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "MedicUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicFactory",
            "id": "class-MedicFactory-0e10ea6cbb3647a26fc15698d9ee7427c0991e10244278a16b0d5c8559ec7d08a751df72e0994c2adb4ff530205de1c8b8cd4dd78569c4ddded09249aeb73b83",
            "file": "projects/sistema/src/app/medic/domain/medic.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Medic, MedicProperties } from './medic';\r\nexport class MedicFactory {\r\n  create(\r\n    nombre: string,\r\n    apellido: string,\r\n    segundo_nombre: string,\r\n    cmp: string,\r\n    correo: string,\r\n    dni: string,\r\n    foto: string\r\n  ) {\r\n    const MedicProperties: MedicProperties = {\r\n      nombre,\r\n      apellido,\r\n      segundo_nombre,\r\n      cmp,\r\n      correo,\r\n      dni,\r\n      foto,\r\n    };\r\n\r\n    if (nombre.trim() === '') {\r\n      throw new Error('Nombre no puede ser vacío');\r\n    }\r\n    if (apellido.trim() === '') {\r\n      throw new Error('Apellido no puede ser vacío');\r\n    }\r\n\r\n    return new Medic(MedicProperties);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "apellido",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segundo_nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cmp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dni",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "foto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "apellido",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segundo_nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cmp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dni",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "foto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Role",
            "id": "class-Role-55a964a2845f917d97718c55d9a4a71ccc4f4464276558db28971fa9396213649a81184f93c5a59392c82b009eea118495ed6118b3205ea0418d1746ac988147",
            "file": "projects/sistema/src/app/role/domain/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface RoleEssential {\r\n  readonly rol: string;\r\n}\r\n\r\nexport interface RoleOptional {\r\n  readonly id: number;\r\n}\r\n\r\nexport type RoleProperties = Required<RoleEssential> & Partial<RoleOptional>;\r\n\r\nexport type RoleUpdate = Partial<{ role: string }>;\r\n\r\nexport class Role {\r\n  private readonly id: number;\r\n  private rol: string;\r\n\r\n  constructor(properties: RoleProperties) {\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): RoleProperties {\r\n    return {\r\n      id: this.id,\r\n      rol: this.rol,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "RoleProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "RoleProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "rol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "RoleProperties",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RoleFactory",
            "id": "class-RoleFactory-da7aa9570bbc7ab03a50446a4ffb16e32abd4d7a9fd2d780d9fb9c865dfd691abbe325a8e040e3e979bd1e9cf74d145305eb90d77369d6bc2b8530f625888e2b",
            "file": "projects/sistema/src/app/role/domain/role.factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Role } from './role';\r\n\r\nexport class RoleFactory {\r\n  create(rol: string) {\r\n    if (rol.trim() === '') {\r\n      throw new Error('Rol no puede ser vacío');\r\n    }\r\n\r\n    return new Role({ rol });\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "rol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-1aa6d792c7f654edfdddb3301562c88249eed438048bdeefed235280bffbc0682c4a8df255d8044d375db373aa63ab352a05727868c50364ff59ead2cf853e56",
            "file": "projects/sistema/src/app/user/domain/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface UserRequired {\r\n  nombre: string;\r\n  correo: string;\r\n  password: string;\r\n  roles: any;\r\n}\r\n\r\nexport interface UserOptional {\r\n  id: number;\r\n  activo: boolean;\r\n}\r\n\r\nexport type UserUpdate = Partial<{\r\n  nombre: string;\r\n  password: string;\r\n  roles: any;\r\n}>;\r\n\r\nexport type UserProperties = Required<UserRequired> & Partial<UserOptional>;\r\n\r\nexport class User {\r\n  private readonly id: number;\r\n  private nombre: string;\r\n  private readonly correo: string;\r\n  private password: string;\r\n  private activo: boolean;\r\n  private roles: any;\r\n\r\n  constructor(properties: UserProperties) {\r\n    this.activo = true;\r\n    Object.assign(this, properties);\r\n  }\r\n\r\n  properties(): UserProperties {\r\n    return {\r\n      id: this.id,\r\n      nombre: this.nombre,\r\n      correo: this.correo,\r\n      password: this.password,\r\n      activo: this.activo,\r\n      roles: this.roles,\r\n    };\r\n  }\r\n\r\n  update(fields: UserUpdate) {\r\n    Object.assign(this, fields);\r\n  }\r\n\r\n  delete() {\r\n    this.activo = false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "properties",
                        "type": "UserProperties",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "properties",
                        "type": "UserProperties",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "properties",
                    "args": [],
                    "optional": false,
                    "returnType": "UserProperties",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "fields",
                            "type": "UserUpdate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "UserUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserFactory",
            "id": "class-UserFactory-4a4fc37e793dd7ddd6a784470bd0a5a4701b12c79180e835e8620d7e8933416b36b5b801bd221fe5d7b1ad32012490d9633c1d714faa3e5dcef7a686a7fd3994",
            "file": "projects/sistema/src/app/user/domain/user-factory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { User, UserProperties } from './user';\r\n\r\nexport class UserFactory {\r\n  create(nombre: string, correo: string, password: string, roles: any[]): User {\r\n    const userProperties: UserProperties = {\r\n      nombre,\r\n      correo,\r\n      password,\r\n      roles,\r\n      id: new Date().getTime(),\r\n    };\r\n\r\n    if (nombre.trim() === '') {\r\n      throw new Error('Nombre no puede ser vacío');\r\n    }\r\n\r\n    if (correo.trim() === '') {\r\n      throw new Error('Correo no puede ser vacío');\r\n    }\r\n\r\n    if (roles.length === 0) {\r\n      throw new Error('Debe seleccionar al menos un rol');\r\n    }\r\n\r\n    return new User(userProperties);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nombre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "correo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roles",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RolesAllowedDirective",
            "id": "directive-RolesAllowedDirective-e5d8fb15262597372a5cb8dfdba43b57db847a076645fac3c65c25a40bb94797ae6e765ea13fae21b6ef0e72eaae4cfe89e4576b6738db4f79afdb276ea05950",
            "file": "projects/sistema/src/app/shared/directives/roles-allowed.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { AuthApplication } from '../../core/application/auth.application';\nimport { StorageApplication } from '../../core/application/storage.application';\n\n@Directive({\n  selector: '[rolesAllowed]',\n})\nexport class RolesAllowedDirective {\n  @Input('rolesAllowed') roles: string = '';\n  rolesAllowed: string[] = [];\n\n  constructor(\n    private readonly storage: StorageApplication,\n    private readonly auth: AuthApplication,\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    this.rolesAllowed = this.roles.split(',');\n    this.execute();\n  }\n\n  execute() {\n    const isUserLogged = this.auth.isUserLogged;\n    const rolesUser = this.storage.getFieldInToken('roles') as string[];\n    const isUserAuthorized = rolesUser.some((role) =>\n      this.rolesAllowed.includes(role)\n    );\n\n    if (isUserLogged && isUserAuthorized) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}\n",
            "selector": "[rolesAllowed]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "rolesAllowed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "rolesAllowed",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UploadDirective",
            "id": "directive-UploadDirective-75b640a91fc28b8133a89aa0f612876e8a906e1779b7d11d479f54be8b497d59db7c84a973cbb9e918775edd126a0c5a0f3bfb3ecca24a0e5edce0509f11bbea",
            "file": "projects/sistema/src/app/shared/directives/upload.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[upload]',\r\n})\r\nexport class UploadDirective {\r\n  @Output() onHover: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() onFileDropped: EventEmitter<File> = new EventEmitter<File>();\r\n\r\n  //document.addEventListener(\"dragover\", function (event) { event.preventDefault(); }, false);\r\n\r\n  @HostListener('dragover', ['$event']) onDragOver(event) {\r\n    event.preventDefault();\r\n    this.onHover.emit(true);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) onDragLeave(event) {\r\n    event.preventDefault();\r\n    this.onHover.emit(false);\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop(event) {\r\n    event.preventDefault();\r\n    this.onHover.emit(false);\r\n\r\n    const files = event.dataTransfer.files;\r\n    if (files.length > 0) {\r\n      const fileSelected: File = files[0];\r\n      this.onFileDropped.emit(fileSelected);\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[upload]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onFileDropped",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter<File>"
                },
                {
                    "name": "onHover",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "dragleave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17
                },
                {
                    "name": "dragover",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDragLeave",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragleave', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'dragover', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c8b6c08524b8af212f9f52799516a191fcb4237d6850c839869083e17dc39604d13a38c3cbfb1a1bb19924e37de4d51d29d5fda6ed8253f9c85c4b6af805c945",
            "file": "projects/sistema/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "layoutOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ILayout } from './config/injections/layout/interfaces/layout.interface';\r\nimport { LayoutService } from './config/injections/layout/services/layout.service';\r\n@Component({\r\n  selector: 'amb-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  isOpened = true;\r\n  layoutOptions!: ILayout;\r\n\r\n  constructor(private readonly layoutService: LayoutService) {\r\n    this.layoutService.configuration.subscribe((config: ILayout) => {\r\n      this.layoutOptions = config;\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container,\r\nmat-sidenav-content,\r\nmat-sidenav {\r\n  min-height: 100vh;\r\n}\r\n\r\nmat-sidenav {\r\n  width: 280px;\r\n  background-color: rgb(15, 23, 42);\r\n}\r\n\r\ndiv.logo {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-bottom: 20px;\r\n}\r\n\r\ndiv.logo mat-icon {\r\n  width: 125px;\r\n  height: 125px;\r\n}\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container>\r\n  <mat-sidenav [opened]=\"isOpened\" mode=\"side\" *ngIf=\"!layoutOptions.hideMenu\">\r\n    <div class=\"logo\">\r\n      <mat-icon svgIcon=\"logo\"></mat-icon>\r\n    </div>\r\n    <amb-menu></amb-menu>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <amb-header\r\n      (onToggleMenu)=\"isOpened = !isOpened\"\r\n      *ngIf=\"!layoutOptions.hideHeader\"\r\n    ></amb-header>\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-0885e06dcf9eca318817bad6d85e5ad6f3189098f36a5571d48488317b05ee8a4305e34bdd0a78f558672cd47e6659739a0d0afaccc050488e80d649c0a2cab0",
            "file": "projects/sistema/src/app/shared/components/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messageToConfirm",
                    "defaultValue": "'Are you sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-confirm',\r\n  templateUrl: './confirm.component.html',\r\n  styleUrls: ['./confirm.component.css'],\r\n})\r\nexport class ConfirmComponent implements OnInit {\r\n  messageToConfirm = 'Are you sure?';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\r\n  <h3>{{ messageToConfirm }}</h3>\r\n  <div fxLayout fxLayoutGap=\"15px\" fxLayoutAlign=\"center center\">\r\n    <button mat-raised-button color=\"accent\" mat-dialog-close=\"yes\">Yes</button>\r\n    <button mat-button mat-dialog-close>No</button>\r\n  </div>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-2a41af3cd29c6525d8121f878b73177ab90038b0258fab29c5ed516fcc30b80538c50400225c71485b12799a7d62c875f69a59f7d61cb74fce483ffbf7b1a16a",
            "file": "projects/sistema/src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-container',\r\n  templateUrl: './container.component.html',\r\n  styleUrls: ['./container.component.css']\r\n})\r\nexport class ContainerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  padding: 20px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: whitesmoke;\r\n  height: calc(100vh - 185px);\r\n}\r\n\r\nmat-card {\r\n  flex-basis: 95%;\r\n}\r\n",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <mat-card class=\"mat-elevation-z12\">\r\n    <ng-content></ng-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "CovidComponent",
            "id": "component-CovidComponent-cd465b253401cbf1517745ff8cd22a4cefe6e9c0572d11f5714f6cd18b785579250911602831f39905a1f192c112202aed3d2a78831c92b085b4f43eef33f356",
            "file": "projects/sistema/src/app/dashboard/views/components/covid/covid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-covid",
            "styleUrls": [
                "./covid.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./covid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataCovid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "schema",
                    "defaultValue": "'natural'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showLegend",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 450]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "xAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Countries'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "yAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Confirmed cases'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CovidApplication } from '../../../application/covid.application';\nimport { Graph } from '../../../domain/graph.interface';\n\n@Component({\n  selector: 'amb-covid',\n  templateUrl: './covid.component.html',\n  styleUrls: ['./covid.component.css'],\n})\nexport class CovidComponent implements OnInit {\n  view: [number, number] = [700, 450];\n  schema = 'natural';\n  xAxis = true;\n  yAxis = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  showLegend = false;\n  xAxisLabel = 'Countries';\n  yAxisLabel = 'Confirmed cases';\n\n  dataCovid: Graph[] = [];\n\n  constructor(private readonly covidApplication: CovidApplication) {}\n\n  ngOnInit(): void {\n    this.covidApplication.getCovidData().subscribe((data: Graph[]) => {\n      this.dataCovid = data;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./covid.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "covidApplication",
                        "type": "CovidApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-bar-vertical\n  [view]=\"view\"\n  [results]=\"dataCovid\"\n  [xAxis]=\"xAxis\"\n  [yAxis]=\"yAxis\"\n  [showXAxisLabel]=\"showXAxisLabel\"\n  [showYAxisLabel]=\"showYAxisLabel\"\n  [xAxisLabel]=\"xAxisLabel\"\n  [yAxisLabel]=\"yAxisLabel\"\n  [legend]=\"showLegend\"\n>\n</ngx-charts-bar-vertical>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-c302426963b65caef86928da1bc2dba955e17e45135bf9e61c808626d55b7f7a5478001ceada46814bdfef53f30668ca62eb5daac2159b4ed121c5ba9d43c13d",
            "file": "projects/sistema/src/app/dashboard/views/pages/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-dashboard",
            "styleUrls": [
                "./dashboard.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amb-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title> </amb-title>\n<amb-container>\n  <div fxLayout fxLayout.lt-md=\"column\" fxLayoutAlign=\"space-between\">\n    <amb-covid></amb-covid>\n    <amb-socket></amb-socket>\n  </div>\n</amb-container>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-408a403870c58dab39cf311e05012e531796d13e6eb72e68008ed25b4cb199faa9b26c3c783d7e2177815cad44ce0460107e2f68603080dfab721dea9f01f67d",
            "file": "projects/sistema/src/app/history/views/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css']\r\n})\r\nexport class FormComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>form works!</p>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-33a6baa4e7a894364de7afe112340eb35f3d110f526066114bda2ea3c132a1428d19d644781a17a82c3018607739047cea28692ba06a2d2785a051e4bfd22077-1",
            "file": "projects/sistema/src/app/driver/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormComponent implements OnInit {\r\n  title: string;\r\n  group: FormGroup;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private reference: MatDialogRef<FormComponent>\r\n  ) {\r\n    this.title = data ? 'EDIT' : 'ADD';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm();\r\n  }\r\n\r\n  loadForm() {\r\n    this.group = new FormGroup({\r\n      id: new FormControl(this.data?.id),\r\n      nombre: new FormControl(this.data?.nombre, Validators.required),\r\n    });\r\n  }\r\n\r\n  save() {\r\n    const values = this.group.value;\r\n    const driverId = values.id;\r\n    delete values.id;\r\n\r\n    this.reference.close({ id: driverId, record: values });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal-medic {\r\n  width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n  padding: 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n  padding: 24px;\r\n  margin: 0;\r\n}\r\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FormComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\r\n  <h3>{{ title }}</h3>\r\n  <button mat-icon-button matDialogClose>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-dialog-content>\r\n  <form fxLayout=\"column\" [formGroup]=\"group\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Nombre</mat-label>\r\n      <input type=\"text\" matInput formControlName=\"nombre\" />\r\n    </mat-form-field>\r\n\r\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"button\"\r\n        [disabled]=\"group.invalid\"\r\n        (click)=\"save()\"\r\n      >\r\n        Save\r\n      </button>\r\n      <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>\r\n        Close\r\n      </button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-f7763d8806056b66c0fe919c0daa88c6dffdd627a040130ff429e02302d6d98bf3a1e1b12b6f20505bc8a7f116323634d274d6e0efdfab0b72823223cb8713e7-2",
            "file": "projects/sistema/src/app/medic/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "photoToShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "loadForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormComponent implements OnInit {\r\n  title: string;\r\n  group: FormGroup;\r\n  photoToShow: string;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private reference: MatDialogRef<FormComponent>\r\n  ) {\r\n    this.title = data ? 'EDIT' : 'ADD';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm();\r\n  }\r\n\r\n  loadForm() {\r\n    this.group = new FormGroup({\r\n      id: new FormControl(this.data?.id),\r\n      nombre: new FormControl(this.data?.nombre, Validators.required),\r\n      segundo_nombre: new FormControl(\r\n        this.data?.segundo_nombre,\r\n        Validators.required\r\n      ),\r\n      apellido: new FormControl(this.data?.apellido, Validators.required),\r\n      cmp: new FormControl(this.data?.cmp, Validators.required),\r\n      dni: new FormControl(this.data?.dni, Validators.required),\r\n      correo: new FormControl(this.data?.correo, [\r\n        Validators.required,\r\n        Validators.email,\r\n      ]),\r\n    });\r\n\r\n    if (this.data) {\r\n      this.group.addControl('foto', new FormControl());\r\n      this.photoToShow = this.data.foto ? this.data.foto : '';\r\n    } else {\r\n      this.group.addControl('foto', new FormControl(null, Validators.required));\r\n    }\r\n  }\r\n\r\n  save() {\r\n    const values = this.group.value;\r\n    const medicId = values.id;\r\n    delete values.id;\r\n\r\n    const fd = new FormData();\r\n\r\n    for (const key of Object.keys(values)) {\r\n      if (key === 'foto' && values[key]) {\r\n        fd.append(key, values[key]);\r\n      } else if (key !== 'foto') {\r\n        fd.append(key, values[key]);\r\n      }\r\n    }\r\n\r\n    this.reference.close({ id: medicId, record: fd });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-modal-medic {\r\n  width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n  padding: 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n  padding: 24px;\r\n  margin: 0;\r\n}\r\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "FormComponent-2",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\r\n  <h3>{{ title }}</h3>\r\n  <button mat-icon-button matDialogClose>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-dialog-content>\r\n  <form fxLayout=\"column\" [formGroup]=\"group\">\r\n    <div fxLayout fxLayoutGap=\"10px\">\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <amb-photo\r\n          formControlName=\"foto\"\r\n          [photoByDefault]=\"photoToShow\"\r\n        ></amb-photo>\r\n      </div>\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Nombre</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"nombre\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Segundo nombre</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"segundo_nombre\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Apellido</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"apellido\" />\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"column\" fxFlex=\"1 1 33%\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>CMP</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"cmp\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>DNI</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"dni\" />\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Correo</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"correo\" />\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n\r\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"button\"\r\n        [disabled]=\"group.invalid\"\r\n        (click)=\"save()\"\r\n      >\r\n        Save\r\n      </button>\r\n      <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>\r\n        Close\r\n      </button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-0eabd4583fc1350e7e0bfad6087edae690762a1e3bb00869a2c272bb6b657abc79366d815c6e4c698c1c2935815240853f632db100926092f5f7b074dfc90621-3",
            "file": "projects/sistema/src/app/user/views/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RoleProperties[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "loadRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { RoleApplication } from 'projects/sistema/src/app/role/application/role.application';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { RoleProperties } from '../../../../role/domain/role';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormComponent implements OnInit {\r\n  group: FormGroup;\r\n  title: string;\r\n  roles: Observable<RoleProperties[]>;\r\n  //subscription: Subscription;\r\n\r\n  constructor(\r\n    private readonly reference: MatDialogRef<FormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private readonly roleApplication: RoleApplication\r\n  ) {\r\n    this.title = this.data ? 'Edit' : 'Add';\r\n\r\n    this.group = new FormGroup({\r\n      id: new FormControl(this.data?.id),\r\n      nombre: new FormControl(this.data?.nombre, [Validators.required]),\r\n      correo: new FormControl(this.data?.correo, [\r\n        Validators.required,\r\n        Validators.email,\r\n      ]),\r\n      roles: new FormControl(this.data?.roles.map((role) => role.id)),\r\n    });\r\n\r\n    if (this.data) {\r\n      this.group.addControl('password', new FormControl(''));\r\n    } else {\r\n      this.group.addControl(\r\n        'password',\r\n        new FormControl('', Validators.required)\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadRoles();\r\n  }\r\n\r\n  loadRoles() {\r\n    /*    this.subscription = this.roleApplication.list().subscribe((data) => {\r\n      this.roles = data;\r\n    }); */\r\n    this.roles = this.roleApplication.list();\r\n  }\r\n\r\n  save() {\r\n    const values = this.group.value;\r\n    const userId = values.id;\r\n    delete values.id;\r\n\r\n    if (!values.password) {\r\n      delete values.password;\r\n    }\r\n\r\n    this.reference.close({ id: userId, record: values });\r\n  }\r\n  /* \r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  } */\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* .mat-dialog-container[adaasafa] {\r\n  padding: 0 !important;\r\n} */\r\n\r\n.form-modal-medic {\r\n  width: 600px;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-container {\r\n  padding: 0 0 10px 0 !important;\r\n}\r\n\r\n.form-modal-medic .mat-dialog-content {\r\n  margin: 0 !important;\r\n  padding-top: 15px;\r\n}\r\n\r\n/* @media screen and (max-width: 700px) {\r\n  .form-modal {\r\n    width: 500px;\r\n  }\r\n} */\r\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "roleApplication",
                        "type": "RoleApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "reference",
                        "type": "MatDialogRef<FormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "roleApplication",
                        "type": "RoleApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "FormComponent-3",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"space-between center\">\r\n  <h3>{{ title }}</h3>\r\n  <button mat-icon-button mat-dialog-close>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-dialog-content>\r\n  <form fxLayout=\"column\" [formGroup]=\"group\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Nombre</mat-label>\r\n      <input type=\"text\" matInput formControlName=\"nombre\" />\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Correo</mat-label>\r\n      <input type=\"text\" matInput formControlName=\"correo\" />\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Contraseña</mat-label>\r\n      <input type=\"password\" matInput formControlName=\"password\" />\r\n      <mat-hint>Dejar en blanco si no se desea cambiar la contraseña</mat-hint>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Roles</mat-label>\r\n      <mat-select multiple formControlName=\"roles\">\r\n        <mat-option *ngFor=\"let role of roles | async\" [value]=\"role.id\">{{\r\n          role.rol\r\n        }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <div fxLayout fxLayoutAlign=\"end\" fxLayoutGap=\"10px\">\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        type=\"button\"\r\n        [disabled]=\"group.invalid\"\r\n        (click)=\"save()\"\r\n      >\r\n        Save\r\n      </button>\r\n      <button mat-button color=\"primary\" type=\"button\" mat-dialog-close>\r\n        Close\r\n      </button>\r\n    </div>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-813776fb1f2de02b21b7ea37dfcb9cf513f941538c9097cd695eb633bf6424fb3e625eea55ac3352e1af5eb2118af4c68317724ef545519f510d59393b341095-1",
            "file": "projects/sistema/src/app/core/views/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onToggleMenu",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AuthApplication } from '../../../application/auth.application';\r\nimport { StorageApplication } from '../../../application/storage.application';\r\n\r\n@Component({\r\n  selector: 'amb-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @Output() onToggleMenu: EventEmitter<void> = new EventEmitter();\r\n  username: string;\r\n\r\n  constructor(\r\n    private readonly auth: AuthApplication,\r\n    readonly storage: StorageApplication\r\n  ) {\r\n    this.username = storage.getFieldInToken('name') as string;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  toggleMenu() {\r\n    this.onToggleMenu.emit();\r\n  }\r\n\r\n  logout() {\r\n    this.auth.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n  background-color: white !important;\r\n  border-bottom: 2px solid #6b6b6b2b;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.profile {\r\n  height: 100%;\r\n}\r\n\r\n.profile img {\r\n  max-width: 50px;\r\n  border-radius: 50%;\r\n  border: 1px solid #6b6b6b2b;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar>\r\n  <button mat-icon-button (click)=\"toggleMenu()\">\r\n    <mat-icon>menu</mat-icon>\r\n  </button>\r\n\r\n  <button mat-button class=\"profile\" [matMenuTriggerFor]=\"menuVertical\">\r\n    <img src=\"assets/img/avatar/user.png\" alt=\"\" />\r\n    <span>{{ username }}</span>\r\n    <mat-icon>keyboard_arrow_down</mat-icon>\r\n  </button>\r\n  <mat-menu #menuVertical>\r\n    <button mat-menu-item>\r\n      <mat-icon>lock</mat-icon>\r\n      <span>Bloquear sesión</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"logout()\">\r\n      <mat-icon>logout</mat-icon>\r\n      <span>Cerrar sesión</span>\r\n    </button>\r\n  </mat-menu>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "KeypadComponent",
            "id": "component-KeypadComponent-eb4b24e1a644b4030837596d7c961425667a79e63ab90ba81a1fb06326b51fefa61f7985441307d0c204098215c7cea8390157bb0870f873a3d247c1a8b3bc2d",
            "file": "projects/sistema/src/app/shared/components/keypad/keypad.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-keypad",
            "styleUrls": [
                "./keypad.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./keypad.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onExport",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'amb-keypad',\n  templateUrl: './keypad.component.html',\n  styleUrls: ['./keypad.component.css'],\n})\nexport class KeypadComponent implements OnInit {\n  @Output() onExport = new EventEmitter<string>();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  export(type: string) {\n    this.onExport.emit(type);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./keypad.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutGap=\"10px\">\n  <button mat-flat-button color=\"primary\" (click)=\"export('excel')\">\n    <div fxLayout fxLayoutAlign=\"space-between center\" fxLayoutGap=\"10px\">\n      <span>Export to Excel</span>\n      <mat-icon svgIcon=\"excel\"></mat-icon>\n    </div>\n  </button>\n\n  <button mat-flat-button color=\"warn\" (click)=\"export('pdf')\">\n    <div fxLayout fxLayoutAlign=\"space-between center\" fxLayoutGap=\"10px\">\n      <span>Export to PDF</span>\n      <mat-icon svgIcon=\"pdf\"></mat-icon>\n    </div>\n  </button>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-64401e40194995fc2e9598b151c0f48a131bace9cebaecc309661fe3f189ec05abae778319e8785dc0823ae8d305e221eb7e4b411f4f4f829efd66152166bd20",
            "file": "projects/sistema/src/app/core/views/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthApplication } from '../../../application/auth.application';\r\nimport { AuthFactory } from '../../../domain/auth.factory';\r\nimport { StorageApplication } from '../../../application/storage.application';\r\n\r\n@Component({\r\n  selector: 'amb-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  group: FormGroup;\r\n\r\n  constructor(\r\n    private readonly router: Router,\r\n    private readonly authApplication: AuthApplication,\r\n    private readonly storageApplication: StorageApplication\r\n  ) {\r\n    this.group = new FormGroup({\r\n      correo: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  login() {\r\n    const values = this.group.value;\r\n    const auth = AuthFactory.create(values.correo, values.password);\r\n\r\n    this.authApplication.login(auth);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 80%;\r\n  display: block;\r\n}\r\n\r\nh1,\r\nh2 {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApplication",
                        "type": "AuthApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageApplication",
                        "type": "StorageApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"group\">\r\n  <h1>Sistema de Historias Médicas</h1>\r\n  <h2>Credenciales</h2>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Correo</mat-label>\r\n    <input type=\"text\" matInput formControlName=\"correo\" />\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Contraseña</mat-label>\r\n    <input type=\"password\" matInput formControlName=\"password\" />\r\n  </mat-form-field>\r\n  <button\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    (click)=\"login()\"\r\n    type=\"button\"\r\n    [disabled]=\"group.invalid\"\r\n  >\r\n    Ingresar\r\n  </button>\r\n</form>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-3a2ba2833429f269415442461cab941a5411f34a55faf644d75de2bc91137f5e9a31dcba9ccbe8fccc3f7375c0dae0c23942347f7231ed992306883349fd3a28",
            "file": "projects/sistema/src/app/core/views/components/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  Menu,\r\n  MenuService,\r\n} from 'projects/sistema/src/app/shared/services/menu.service';\r\n\r\n@Component({\r\n  selector: 'amb-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MenuComponent implements OnInit {\r\n  public menu: Menu[];\r\n\r\n  constructor(private readonly menuService: MenuService) {\r\n    this.menu = menuService.getItems();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list mat-list-item a {\r\n  transition: 0.2s background-color;\r\n}\r\n\r\nmat-nav-list mat-list-item a,\r\nmat-nav-list mat-list-item a:link,\r\nmat-nav-list mat-list-item a:visited,\r\nmat-nav-list mat-list-item a:active {\r\n  color: rgba(255, 255, 255, 0.5) !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0 20px;\r\n}\r\nmat-nav-list mat-list-item a.activeLink,\r\nmat-nav-list mat-list-item a:hover {\r\n  color: white !important;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n}\r\n\r\nmat-nav-list mat-list-item span.mat-list-item-content {\r\n  padding: 0 !important;\r\n}\r\n\r\nmat-list-item span.title {\r\n  padding-left: 15px;\r\n}\r\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\r\n  <mat-list-item *ngFor=\"let menuItem of menu\">\r\n    <a routerLink=\"{{ menuItem.url }}\" routerLinkActive=\"activeLink\">\r\n      <button mat-icon-button>\r\n        <mat-icon svgIcon=\"{{ menuItem.icon }}\"></mat-icon>\r\n        <span class=\"title\">{{ menuItem.title }}</span>\r\n      </button>\r\n    </a>\r\n  </mat-list-item>\r\n</mat-nav-list>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-185016460c89328abcecbff9582f945deebc23cab3c07b19eb73c146390f2a9449b9e931440039201cede03714076e78990edb1c8e6fe02d728ccb5745387329",
            "file": "projects/sistema/src/app/history/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css']\r\n})\r\nexport class PageListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<amb-title>\r\n  <!--   <span moduleTitle>History</span>\r\n  <span moduleIcon>ballot</span> -->\r\n  <button mat-flat-button color=\"primary\" btnAction>\r\n    <mat-icon>add</mat-icon>\r\n    Add history\r\n  </button>\r\n</amb-title>\r\n<amb-container> <amb-table></amb-table> </amb-container>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-3bb0b2f9f81dba1a5f3611282218ae68e141ce175bfbbd3ac10e9766b5763168ac0dca07f7dc0646d1a1ef0d464b59547a7587ff5707a4b4b7ea20e2f05a97aa-1",
            "file": "projects/sistema/src/app/driver/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "['id', 'nombre']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "filename",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Título reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\r\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\r\nimport { UtilsService } from 'projects/sistema/src/app/shared/services/utils.service';\r\nimport { DriverApplication } from '../../../application/driver.application';\r\nimport { Driver } from '../../../domain/driver';\r\nimport { FormComponent } from '../../components/form/form.component';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<\r\n  Driver,\r\n  DriverApplication,\r\n  FormComponent\r\n> {\r\n  listFields: string[] = ['id', 'nombre'];\r\n  metaColumns: MetaColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n  ];\r\n\r\n  constructor(\r\n    protected driverApplication: DriverApplication,\r\n    protected override readonly utilsService: UtilsService\r\n  ) {\r\n    super(driverApplication, utilsService, FormComponent);\r\n    this.filename = 'Drivers';\r\n    this.sheetName = 'List';\r\n    this.titleReport = 'Medics';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "driverApplication",
                        "type": "DriverApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageListComponent-1",
            "templateData": "<amb-title>\r\n  <button mat-flat-button color=\"primary\" btnAction (click)=\"showModalWindow()\">\r\n    <mat-icon>add</mat-icon>\r\n    Add driver\r\n  </button>\r\n</amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"text-align-right\">\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            (click)=\"showModalWindow(row)\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-stroked-button color=\"accent\" (click)=\"delete(row)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </amb-table>\r\n  </perfect-scrollbar>\r\n  <div fxLayout fxLayoutAlign=\"space-between center\">\r\n    <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\r\n    <amb-paginator\r\n      [length]=\"quantityRecords\"\r\n      [pageSize]=\"pageSize\"\r\n      (onChangePage)=\"getRecordsByPage($event)\"\r\n    ></amb-paginator>\r\n  </div>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-ae8bba4cbc3f7a11c9f8e36fb9a961ff5590b1072cc0c787aa5ba0e562d1ab0d2154d57f9a15714c339bb3526ac1702a68ef17b5be8d73d9ec54ad3a5241e711-2",
            "file": "projects/sistema/src/app/medic/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "['id', 'nombre', 'apellido', 'cmp']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'apellido', title: 'Apellido' },\r\n    { field: 'cmp', title: 'CMP' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "filename",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Título reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\r\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\r\nimport { UtilsService } from 'projects/sistema/src/app/shared/services/utils.service';\r\nimport { MedicApplication } from '../../../application/medic.application';\r\nimport { Medic } from '../../../domain/medic';\r\nimport { FormComponent } from '../../components/form/form.component';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<\r\n  Medic,\r\n  MedicApplication,\r\n  FormComponent\r\n> {\r\n  listFields: string[] = ['id', 'nombre', 'apellido', 'cmp'];\r\n  metaColumns: MetaColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'apellido', title: 'Apellido' },\r\n    { field: 'cmp', title: 'CMP' },\r\n  ];\r\n\r\n  constructor(\r\n    protected medicApplication: MedicApplication,\r\n    protected override readonly utilsService: UtilsService\r\n  ) {\r\n    super(medicApplication, utilsService, FormComponent);\r\n    this.filename = 'Medics';\r\n    this.sheetName = 'List';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav {\r\n  width: 500px;\r\n}\r\n",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "medicApplication",
                        "type": "MedicApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "PageListComponent-2",
            "templateData": "<amb-title>\r\n  <button\r\n    mat-flat-button\r\n    color=\"primary\"\r\n    btnAction\r\n    (click)=\"showModalWindow()\"\r\n    *rolesAllowed=\"'MEDIC'\"\r\n  >\r\n    <mat-icon>add</mat-icon>\r\n    Add medic\r\n  </button>\r\n</amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"text-align-right\">\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            (click)=\"showModalWindow(row)\"\r\n            *rolesAllowed=\"'ADMIN,MEDIC'\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-stroked-button\r\n            color=\"accent\"\r\n            (click)=\"delete(row)\"\r\n            *rolesAllowed=\"'AUDITOR'\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </amb-table>\r\n  </perfect-scrollbar>\r\n  <div fxLayout fxLayoutAlign=\"space-between center\">\r\n    <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\r\n    <amb-paginator\r\n      [length]=\"quantityRecords\"\r\n      [pageSize]=\"pageSize\"\r\n      (onChangePage)=\"getRecordsByPage($event)\"\r\n    ></amb-paginator>\r\n  </div>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-1e63a88538fc03ab7145829459cb5d8d48340cb928a43a8e5ba8a18631d597409fc4344d7b7dd240f2b5622df157496b20b6a4bd6d03d61e17431adc51ae2487-3",
            "file": "projects/sistema/src/app/user/views/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "listFields",
                    "defaultValue": "['id', 'name', 'lastname', 'cmp']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'correo', title: 'Correo' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "filename",
                    "defaultValue": "'data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "quantityRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "sheetName",
                    "defaultValue": "'Sheet1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "titleReport",
                    "defaultValue": "'Título reporte'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "fillDataSource",
                    "args": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "IResultPage<Entity>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "getRecordsByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "showModalWindow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MetaColumn } from 'projects/sistema/src/app/shared/interfaces/metacolumn.interface';\r\nimport { UtilsService } from 'projects/sistema/src/app/shared/services/utils.service';\r\nimport { FormComponent } from '../../components/form/form.component';\r\nimport { UserApplication } from '../../../application/user.application';\r\nimport { BaseComponent } from 'projects/sistema/src/app/shared/components/base/base-component';\r\nimport { User } from '../../../domain/user';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<\r\n  User,\r\n  UserApplication,\r\n  FormComponent\r\n> {\r\n  listFields: string[] = ['id', 'name', 'lastname', 'cmp'];\r\n  metaColumns: MetaColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'correo', title: 'Correo' },\r\n  ];\r\n\r\n  constructor(\r\n    protected override readonly utilsService: UtilsService,\r\n    protected readonly userApplication: UserApplication\r\n  ) {\r\n    super(userApplication, utilsService, FormComponent);\r\n    this.filename = 'Users';\r\n    this.sheetName = 'List';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userApplication",
                        "type": "UserApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userApplication",
                        "type": "UserApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "PageListComponent-3",
            "templateData": "<amb-title>\r\n  <button mat-flat-button color=\"primary\" btnAction (click)=\"showModalWindow()\">\r\n    <mat-icon>add</mat-icon>\r\n    Add user\r\n  </button>\r\n</amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <amb-table [metaColumns]=\"metaColumns\" [dataSource]=\"dataSource\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"text-align-right\">\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            (click)=\"showModalWindow(row)\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-stroked-button color=\"accent\" (click)=\"delete(row)\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </amb-table>\r\n  </perfect-scrollbar>\r\n  <div fxLayout fxLayoutAlign=\"space-between center\">\r\n    <amb-keypad (onExport)=\"export($event)\"></amb-keypad>\r\n    <amb-paginator\r\n      [length]=\"quantityRecords\"\r\n      [pageSize]=\"pageSize\"\r\n      (onChangePage)=\"getRecordsByPage($event)\"\r\n    ></amb-paginator>\r\n  </div>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageLoginComponent",
            "id": "component-PageLoginComponent-a06680a003883d0058c988404ddd54be047ced4134787dfbc5c61c176f738ae1ca4b285c7b61dccd4abe79b4bdb86cae5a2bc3b205e7de82061293972a0aa89c",
            "file": "projects/sistema/src/app/core/views/pages/page-login/page-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-login",
            "styleUrls": [
                "./page-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { LayoutService } from 'projects/sistema/src/app/config/injections/layout/services/layout.service';\r\n\r\n@Component({\r\n  selector: 'amb-page-login',\r\n  templateUrl: './page-login.component.html',\r\n  styleUrls: ['./page-login.component.css'],\r\n})\r\nexport class PageLoginComponent implements OnInit {\r\n  constructor(private readonly layoutService: LayoutService) {\r\n    this.layoutService.configuration = { hideHeader: true, hideMenu: true };\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.layoutService.configuration = { hideHeader: false, hideMenu: false };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  background-image: url(/assets/img/background-new.jpg);\r\n  height: 100vh;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.info {\r\n  padding-left: 50px;\r\n}\r\n\r\nh1 {\r\n  color: white;\r\n}\r\n\r\n.login {\r\n  background-color: white;\r\n}\r\n",
                    "styleUrl": "./page-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "LayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"space-between\" class=\"container\">\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center\" fxFlex=\"1 1 70%\" class=\"info\">\r\n    <lottie-player\r\n      autoplay\r\n      loop\r\n      speed=\"1\"\r\n      src=\"/assets/lotties/lottie.json\"\r\n      style=\"width: 500px\"\r\n    >\r\n    </lottie-player>\r\n    <!--     <div class=\"logo\">\r\n      <img src=\"/assets/icons/logo.svg\" alt=\"\" />\r\n    </div>\r\n    <h1>App Ambulance</h1> -->\r\n  </div>\r\n\r\n  <div fxFlex=\"1 1 30%\" fxLayout fxLayoutAlign=\"center center\" class=\"login\">\r\n    <amb-login></amb-login>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-c7568304b9cbe9c9aa414d8076a73d161988542eee63e5a404a920f641992ff9fc7dd5328085fbd68c7b62deeeca1b5767176015e9b4b576980f9240f0cae2c3",
            "file": "projects/sistema/src/app/shared/components/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-paginator",
            "styleUrls": [
                "./paginator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangePage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageEvent",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { PageEvent } from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'amb-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.css'],\r\n})\r\nexport class PaginatorComponent implements OnInit {\r\n  @Input() length: number = 0;\r\n  @Input() pageSize: number = 0;\r\n  @Output() onChangePage: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  changePage(pageEvent: PageEvent) {\r\n    this.onChangePage.emit(pageEvent.pageIndex);\r\n    console.log('pageIndex', pageEvent.pageIndex);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-paginator\r\n  [length]=\"length\"\r\n  [pageSize]=\"pageSize\"\r\n  (page)=\"changePage($event)\"\r\n  showFirstLastButtons=\"true\"\r\n>\r\n</mat-paginator>\r\n"
        },
        {
            "name": "PhotoComponent",
            "id": "component-PhotoComponent-84eaf29581a23f707587ca547f76419aa3759f6f8d6bc9918a9722714d7506a5f3dd3f22bb78c1c93c5b6b5aa0526a6a8f34f93a3e8a1ff459bc3045e6b7d3c0",
            "file": "projects/sistema/src/app/shared/components/photo/photo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PhotoComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "amb-photo",
            "styleUrls": [
                "./photo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./photo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "photoByDefault",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fileInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'file'"
                        }
                    ]
                },
                {
                    "name": "isUsingWebcam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'photo'"
                        }
                    ]
                },
                {
                    "name": "statusHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "triggerSnapshot",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "changeOriginPhoto",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSlideToggleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeLoadImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fileDropped",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imageCapture",
                    "args": [
                        {
                            "name": "event",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPhotoFromUrlOrDataUrl",
                    "args": [
                        {
                            "name": "dataUrlOrPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataUrlOrPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerAsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { WebcamImage } from 'ngx-webcam';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { environment } from 'projects/sistema/src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'amb-photo',\r\n  templateUrl: './photo.component.html',\r\n  styleUrls: ['./photo.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => PhotoComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class PhotoComponent implements OnInit {\r\n  @ViewChild('photo') photo!: ElementRef;\r\n  @ViewChild('file') fileInput: ElementRef;\r\n  @Input() photoByDefault: string;\r\n  statusHover = false;\r\n  triggerSnapshot = new Subject<void>();\r\n  isUsingWebcam: boolean = false;\r\n  onChange: any;\r\n  onTouched: any;\r\n  value!: File;\r\n\r\n  constructor() {}\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  writeValue(val: File): void {\r\n    if (val) {\r\n      this.value = val;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  fileDropped(file: File) {\r\n    if (!file.type.startsWith('image/')) {\r\n      return;\r\n    }\r\n\r\n    this.onTouched();\r\n    this.onChange(file);\r\n\r\n    const fr: FileReader = new FileReader();\r\n    fr.readAsDataURL(file);\r\n    fr.onloadend = (response: any) => {\r\n      const dataBase64 = response.target.result;\r\n      this.loadPhotoFromUrlOrDataUrl(dataBase64);\r\n    };\r\n  }\r\n\r\n  loadPhotoFromUrlOrDataUrl(dataUrlOrPath: string) {\r\n    this.photo.nativeElement.style.backgroundImage =\r\n      'url(' + dataUrlOrPath + ')';\r\n  }\r\n\r\n  executeLoadImage() {\r\n    this.fileInput.nativeElement.click();\r\n  }\r\n\r\n  selectImage(event: any) {\r\n    const file = event.target.files[0];\r\n    this.fileDropped(file);\r\n  }\r\n\r\n  triggerAsObservable(): Observable<void> {\r\n    return this.triggerSnapshot.asObservable();\r\n  }\r\n\r\n  takePhoto() {\r\n    this.triggerSnapshot.next();\r\n  }\r\n\r\n  imageCapture(event: WebcamImage) {\r\n    fetch(event.imageAsDataUrl)\r\n      .then((response) => response.arrayBuffer())\r\n      .then(\r\n        (buffer) => new File([buffer], 'image-profile', { type: 'image/jpg' })\r\n      )\r\n      .then((file) => {\r\n        this.isUsingWebcam = false;\r\n        this.fileDropped(file);\r\n      });\r\n  }\r\n\r\n  changeOriginPhoto(event: MatSlideToggleChange) {\r\n    this.isUsingWebcam = !this.isUsingWebcam;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.photoByDefault) {\r\n      const path = `${environment.apiUrl}/photos/${this.photoByDefault}`;\r\n      this.loadPhotoFromUrlOrDataUrl(path);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 100%;\r\n  height: 207px;\r\n  border: 1px solid #ccc;\r\n  cursor: pointer;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n}\r\n\r\n.container.hover {\r\n  border: 1px dashed red;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  display: none;\r\n}\r\n",
                    "styleUrl": "./photo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"container\"\r\n  [ngClass]=\"{ hover: statusHover }\"\r\n  *ngIf=\"!isUsingWebcam\"\r\n  upload\r\n  (onHover)=\"statusHover = $event\"\r\n  (onFileDropped)=\"fileDropped($event)\"\r\n  (click)=\"executeLoadImage()\"\r\n  #photo\r\n></div>\r\n<webcam\r\n  *ngIf=\"isUsingWebcam\"\r\n  [height]=\"207\"\r\n  [width]=\"168\"\r\n  [trigger]=\"triggerAsObservable()\"\r\n  (imageCapture)=\"imageCapture($event)\"\r\n  mirrorImage=\"never\"\r\n></webcam>\r\n\r\n<input type=\"file\" #file (change)=\"selectImage($event)\" />\r\n<div>\r\n  <mat-slide-toggle\r\n    color=\"primary\"\r\n    [checked]=\"isUsingWebcam\"\r\n    (change)=\"changeOriginPhoto($event)\"\r\n    >Use webcam</mat-slide-toggle\r\n  >\r\n  <button\r\n    mat-icon-button\r\n    color=\"primary\"\r\n    (click)=\"takePhoto()\"\r\n    type=\"button\"\r\n    *ngIf=\"isUsingWebcam\"\r\n  >\r\n    <mat-icon>add_a_photo</mat-icon>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-3f76ed4d829ee5bbca11db0e7acd3ec4a89443c4572e79ca84cde0dce479d9cd90423240c052405a968d4c5f7510a6692b2f5e0a1717dbf601768567f429ed92",
            "file": "projects/sistema/src/app/core/views/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>sidebar works!</p>\r\n"
        },
        {
            "name": "SocketComponent",
            "id": "component-SocketComponent-9c2c97746006c2897af3b4abf764bc0979d0e72fa3a74329d8f9470aa91313dc7caaeb66f4f08f79d8cfea7b04dd2d5899a8cdcb2c8390a5bab56ede930e3c2c",
            "file": "projects/sistema/src/app/dashboard/views/components/socket/socket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-socket",
            "styleUrls": [
                "./socket.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./socket.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataVaccums",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Graph[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "doughnut",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gradient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "legend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "legendPosition",
                    "defaultValue": "'Right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "legendTitle",
                    "defaultValue": "'Vaccums'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "scheme",
                    "defaultValue": "'natural'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "view",
                    "defaultValue": "[500, 450]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SocketApplication } from '../../../application/socket.application';\nimport { Graph } from '../../../domain/graph.interface';\n\n@Component({\n  selector: 'amb-socket',\n  templateUrl: './socket.component.html',\n  styleUrls: ['./socket.component.css'],\n})\nexport class SocketComponent implements OnInit {\n  view: [number, number] = [500, 450];\n  scheme = 'natural';\n  legend = true;\n  legendPosition = 'Right';\n  legendTitle = 'Vaccums';\n  gradient = true;\n  doughnut = true;\n\n  dataVaccums: Graph[] = [];\n\n  constructor(private readonly socket: SocketApplication) {}\n\n  ngOnInit(): void {\n    this.socket.listen('dataupdate').subscribe((data: Graph[]) => {\n      this.dataVaccums = data;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./socket.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "socket",
                        "type": "SocketApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-pie-chart\n  [view]=\"view\"\n  [scheme]=\"scheme\"\n  [results]=\"dataVaccums\"\n  [gradient]=\"gradient\"\n  [legend]=\"legend\"\n  [legendTitle]=\"legendTitle\"\n  [doughnut]=\"doughnut\"\n></ngx-charts-pie-chart>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-4f9e10f5adc3a5d95b67dc285192d8bfff7bf47653c0406d5844b23804f9a9d91f07530fbdf7ce03a36e4a68456a199134b082a9e23ecd818d7037ff98317569",
            "file": "projects/sistema/src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "metaColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "MetaColumn[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MatColumnDef, MatTable } from '@angular/material/table';\r\nimport { MetaColumn } from '../../interfaces/metacolumn.interface';\r\n\r\n@Component({\r\n  selector: 'amb-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  listFields: any[] = [];\r\n  @Input() dataSource: any[] = [];\r\n  @Input() metaColumns: MetaColumn[] = [];\r\n  @ContentChildren(MatColumnDef, { descendants: true })\r\n  columnsDef!: QueryList<MatColumnDef>;\r\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['metaColumns']) {\r\n      this.listFields = this.metaColumns.map((el) => el.field);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  selectRow(row: any) {\r\n    row['marked'] = !row['marked'];\r\n    // console.log(event);\r\n    //alert('row selected: ' + row.id);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.columnsDef) {\r\n      return;\r\n    }\r\n\r\n    this.columnsDef.forEach((columnDef) => {\r\n      this.listFields.push(columnDef.name);\r\n      this.table.addColumnDef(columnDef);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.highline {\r\n  cursor: pointer;\r\n}\r\n\r\n.highlineMarked {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.highline:hover {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.headerRow {\r\n  background-color: skyblue;\r\n}\r\n\r\n.cellData {\r\n  border-right: 1px solid red;\r\n}\r\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <ng-content></ng-content>\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n    <ng-container\r\n      [matColumnDef]=\"record.field\"\r\n      *ngFor=\"let record of metaColumns\"\r\n    >\r\n      <th mat-header-cell *matHeaderCellDef>\r\n        {{ record.title }}\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let row\">\r\n        {{ row[record.field] }}\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\r\n    <tr\r\n      mat-row\r\n      *matRowDef=\"let row; columns: listFields\"\r\n      class=\"highline\"\r\n      [ngClass]=\"{ highlineMarked: row['marked'] }\"\r\n    ></tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "TestComponent",
            "id": "component-TestComponent-6b6d84ee0db75d17cfd004aa2f4bd044a80afa0160ac53787bb248f63baec5d261ba74782cab642d522f299844c6f0e54e1080d13fd8b79e79f82886fb50581e",
            "file": "projects/sistema/src/app/test/test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-test",
            "styleUrls": [
                "./test.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.css']\r\n})\r\nexport class TestComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./test.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>test works!</p>\r\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-9c544461a06f5d7d7821932277daff5c4977cd9975cb0f4f4f51eeede085268a201dd2ee6832fa95ec9efb9ec88a2b582c7dcaa07e6d91a7670f27eec966e6bb",
            "file": "projects/sistema/src/app/shared/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-title",
            "styleUrls": [
                "./title.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Menu, MenuService } from '../../services/menu.service';\r\n\r\n@Component({\r\n  selector: 'amb-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.css'],\r\n})\r\nexport class TitleComponent implements OnInit {\r\n  itemMenu: Menu;\r\n\r\n  constructor(\r\n    private readonly activatedRoute: ActivatedRoute,\r\n    private readonly menuService: MenuService\r\n  ) {\r\n    const currentPath =\r\n      '/' + this.activatedRoute.snapshot.pathFromRoot[1].routeConfig?.path;\r\n    this.itemMenu = menuService.getDataPath(currentPath);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".toolbar {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 16px;\r\n  background-color: white;\r\n  border-bottom: 1px solid rgb(226, 232, 240);\r\n  height: 80px;\r\n}\r\n\r\n.info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.info mat-icon {\r\n  font-size: 34px;\r\n  height: 34px;\r\n  width: 34px;\r\n}\r\n\r\n.info h2 {\r\n  font-size: 24px;\r\n  font-family: Inter;\r\n  color: rgb(30, 41, 59) !important;\r\n  line-height: 80px;\r\n}\r\n",
                    "styleUrl": "./title.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\">\r\n  <div class=\"info\">\r\n    <mat-icon [svgIcon]=\"itemMenu.icon\"></mat-icon>\r\n    <h2>{{ itemMenu.title }}</h2>\r\n    <!-- <mat-icon svgIcon=\"\">\r\n      <ng-content select=\"[moduleIcon]\"></ng-content>\r\n    </mat-icon>\r\n    <h2>\r\n      <ng-content select=\"[moduleTitle]\"></ng-content>\r\n    </h2> -->\r\n  </div>\r\n\r\n  <div class=\"action\">\r\n    <ng-content select=\"[btnAction]\"></ng-content>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e02f74bd0337aff82c60371e34d78af482c2bfe80b9981fcc8a23257ad5b7d7e961b418afaf91191fc5d09ba69113620262337707a1fd62469dfc6e9f5a625bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { CoreModule } from './core/core.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { TestComponent } from './test/test.component';\r\nimport { IconService } from './shared/services/icon.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { Paginator } from './shared/services/paginator.service';\r\nimport { LayoutModule } from './config/injections/layout/modules/layout.module';\r\nimport { layoutConstant } from './config/injections/layout/constants/layout.constant';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { UserApplication } from './user/application/user.application';\r\nimport { UserInfrastructure } from './user/infrastructure/user.infrastructure';\r\nimport { AuthApplication } from './core/application/auth.application';\r\nimport { AuthInfrastructure } from './core/infrastructure/auth.infrastructure';\r\nimport { StorageApplication } from './core/application/storage.application';\r\nimport { StorageInfrastructure } from './core/infrastructure/storage.infrastructure';\r\nimport { MedicApplication } from './medic/application/medic.application';\r\nimport { MedicInfrastructure } from './medic/infrastructure/medic.infrastructure';\r\nimport { TokenInterceptor } from './shared/interceptors/token.interceptor';\r\nimport { DriverApplication } from './driver/application/driver.application';\r\nimport { DriverInfrastructure } from './driver/infrastructure/driver.infrastructure';\r\nimport { RoleApplication } from './role/application/role.application';\r\nimport { RoleInfrastructure } from './role/infrastructure/role.infrastructure';\r\n\r\nconst components = [AppComponent, TestComponent];\r\nconst imports = [\r\n  BrowserModule,\r\n  AppRoutingModule,\r\n  HttpClientModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  MatIconModule,\r\n  LayoutModule.forRoot(layoutConstant),\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n];\r\nconst material = [{ provide: MatPaginatorIntl, useClass: Paginator }];\r\nconst applications = [\r\n  UserApplication,\r\n  AuthApplication,\r\n  StorageApplication,\r\n  MedicApplication,\r\n  DriverApplication,\r\n  RoleApplication,\r\n];\r\nconst infrastructures = [\r\n  UserInfrastructure,\r\n  AuthInfrastructure,\r\n  StorageInfrastructure,\r\n  MedicInfrastructure,\r\n  DriverInfrastructure,\r\n  RoleInfrastructure,\r\n];\r\n\r\nconst interceptors = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n];\r\n@NgModule({\r\n  declarations: [...components],\r\n  imports: [...imports],\r\n  bootstrap: [AppComponent],\r\n  providers: [\r\n    ...material,\r\n    ...applications,\r\n    ...infrastructures,\r\n    ...interceptors,\r\n  ],\r\n})\r\nexport class AppModule {\r\n  constructor(private readonly iconService: IconService) {}\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthApplication"
                        },
                        {
                            "name": "AuthInfrastructure"
                        },
                        {
                            "name": "DriverApplication"
                        },
                        {
                            "name": "DriverInfrastructure"
                        },
                        {
                            "name": "MedicApplication"
                        },
                        {
                            "name": "MedicInfrastructure"
                        },
                        {
                            "name": "RoleApplication"
                        },
                        {
                            "name": "RoleInfrastructure"
                        },
                        {
                            "name": "StorageApplication"
                        },
                        {
                            "name": "StorageInfrastructure"
                        },
                        {
                            "name": "UserApplication"
                        },
                        {
                            "name": "UserInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-090aacddeedf71fb0414a941d77aa1ce81cea38e546f958104c0d1af9f808df155a2893fe6eece56b274239acc53c0aba24d1a174606c2976103115e2bf93121",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageLoginComponent } from './core/views/pages/page-login/page-login.component';\r\nimport { AuthenticationGuard } from './shared/guards/authentication.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: PageLoginComponent },\r\n  {\r\n    path: 'user',\r\n    loadChildren: () =>\r\n      \"import('./user/user.module').then((module) => module.UserModule)\",\r\n    canLoad: [AuthenticationGuard],\r\n  },\r\n  {\r\n    path: 'driver',\r\n    loadChildren: () =>\r\n      \"import('./driver/driver.module').then((module) => module.DriverModule)\",\r\n    canLoad: [AuthenticationGuard],\r\n  },\r\n  {\r\n    path: 'medic',\r\n    loadChildren: () =>\r\n      \"import('./medic/medic.module').then((module) => module.MedicModule)\",\r\n    canLoad: [AuthenticationGuard],\r\n  },\r\n  {\r\n    path: 'history',\r\n    loadChildren: () =>\r\n      \"import('./history/history.module').then((module) => module.HistoryModule)\",\r\n    canLoad: [AuthenticationGuard],\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    loadChildren: () =>\r\n      \"import('./dashboard/dashboard.module').then(\\\n        (module) => module.DashboardModule\\\n      )\",\r\n    canLoad: [AuthenticationGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-d59b18724c423c16a058d1facb8b30b31f9bd1fe03746e25ea012bf87120cf019c948b02c8f7e7fef97a1e82ad9a60fc90f244e2448ff63de857698b6c12add8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HeaderComponent } from './views/components/header/header.component';\r\nimport { SidebarComponent } from './views/components/sidebar/sidebar.component';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MenuComponent } from './views/components/menu/menu.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { RouterModule } from '@angular/router';\r\nimport { PageLoginComponent } from './views/pages/page-login/page-login.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { LoginComponent } from './views/components/login/login.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { UtilsService } from '../shared/services/utils.service';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\n\r\nconst components = [\r\n  HeaderComponent,\r\n  SidebarComponent,\r\n  MenuComponent,\r\n  PageLoginComponent,\r\n  LoginComponent,\r\n];\r\nconst imports = [\r\n  CommonModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatMenuModule,\r\n  MatListModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  RouterModule,\r\n  FlexLayoutModule,\r\n  ReactiveFormsModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule,\r\n];\r\nconst exports = [HeaderComponent, SidebarComponent, MenuComponent];\r\n@NgModule({\r\n  declarations: [...components],\r\n  imports: [...imports],\r\n  exports: [...exports],\r\n  providers: [UtilsService],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UtilsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-9eaa7f5a0feca078b8ded3c8e3e63a596bb41673e9b4223aedfba87cd2d9ece113da097e418427ad5388ef557749b379329202dfbe66f65b81cfb03e2fc45663",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { DashboardComponent } from './views/pages/dashboard/dashboard.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { CovidComponent } from './views/components/covid/covid.component';\nimport { CovidApplication } from './application/covid.application';\nimport { CovidInfrastructure } from './infrastructure/covid.infrastructure';\nimport { SocketComponent } from './views/components/socket/socket.component';\nimport { SocketApplication } from './application/socket.application';\nimport { SocketInfrastructure } from './infrastructure/socker.infrastructure';\n\n@NgModule({\n  declarations: [DashboardComponent, CovidComponent, SocketComponent],\n  imports: [\n    CommonModule,\n    DashboardRoutingModule,\n    SharedModule,\n    NgxChartsModule,\n  ],\n  providers: [\n    CovidApplication,\n    CovidInfrastructure,\n    SocketApplication,\n    SocketInfrastructure,\n  ],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CovidApplication"
                        },
                        {
                            "name": "CovidInfrastructure"
                        },
                        {
                            "name": "SocketApplication"
                        },
                        {
                            "name": "SocketInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CovidComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "SocketComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-6ac1aa86205e04f33b77f443635e07616da84fe9427c2bc553ea6ea26b76c6af3613e5d8b6d091273275f814640a4a23b9ae1bc41f71da7d2dfa5f71f04e03c1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './views/pages/dashboard/dashboard.component';\n\nconst routes: Routes = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriverModule",
            "id": "module-DriverModule-24fe319589a7422446063928ac6727778ca181d42c9b11e8f6e450357224501fa6f0a61b2946137d6eb1891e39c8382cd02461f9ab1b3fac88305cdbc1df0321",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/driver/driver.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DriverRoutingModule } from './driver-routing.module';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\nimport { FormComponent } from './views/components/form/form.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent, FormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    DriverRoutingModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class DriverModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DriverRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriverRoutingModule",
            "id": "module-DriverRoutingModule-ec71b9c62272f39cb1b345e8ecb0fa22dfba973a308553aa359d9caa41f94103b5514df2280c176d64be1e76173a03de6d69a5d3632da7ce9d2c3943c265a5f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/driver/driver-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DriverRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoryModule",
            "id": "module-HistoryModule-d3ec75b3a2bdbbf45be0afbdf16080ee64abc4d2fc9b34ac063c2a4150cd30ed9749c2919c17d022046a01dedeeaafee498a0ac63daddd9ffed5bf86da05a1c5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/history/history.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HistoryRoutingModule } from './history-routing.module';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\nimport { FormComponent } from './views/components/form/form.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent, FormComponent],\r\n  imports: [CommonModule, HistoryRoutingModule, SharedModule],\r\n})\r\nexport class HistoryModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "PageListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoryRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoryRoutingModule",
            "id": "module-HistoryRoutingModule-82ac1cf7adbcbc816f12164e184e400c38099738a86bc13dae1155d6cccb0262edcfd040249c16183b3202f9a3e99de221ee6ca0a941460354763c9a00a17511",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/history/history-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HistoryRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-36d4a8381b6194c0520d06062141ac214f56457ffa21bd6347a103bd51c1b9791cf3a87e40028408a990245aac54b4a8bc4858447eed67db34b93207cc9ab5fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/config/injections/layout/modules/layout.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<LayoutModule>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ILayout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { ILayout } from '../interfaces/layout.interface';\r\nimport { LAYOUT_TOKEN } from '../tokens/layout.token';\r\n\r\n@NgModule()\r\nexport class LayoutModule {\r\n  static forRoot(config: ILayout): ModuleWithProviders<LayoutModule> {\r\n    return {\r\n      ngModule: LayoutModule,\r\n      providers: [{ provide: LAYOUT_TOKEN, useValue: config }],\r\n    };\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicModule",
            "id": "module-MedicModule-716174b446f41d5bbfcb8666dc151871b571b057654c0b0a175a733a46818edcca985db585de9f9b2e0e187fe1769bd0fc15a86a2d9bd3c242a9407527f68a09",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/medic/medic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MedicRoutingModule } from './medic-routing.module';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\nimport { FormComponent } from './views/components/form/form.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent, FormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MedicRoutingModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class MedicModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MedicRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicRoutingModule",
            "id": "module-MedicRoutingModule-76dd1dc7e02247f37da8102adc96f6e56ef51dda2d929ce719afc0dde8f684776aac6280ccb756bcaf43157b035389e6d46853bf2da1a377d0d1446b7e79ab80",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/medic/medic-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthenticationGuard } from '../shared/guards/authentication.guard';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageListComponent,\r\n    canActivate: [AuthenticationGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MedicRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-2d5d56afe78874512ab4cf3faf0560481dac0dccd81103d610ca668216b05f73d566098e12ef6592828a25babbbb4818d154a87aa4d5c74b633a264a2d646791",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TitleComponent } from './components/title/title.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { ContainerComponent } from './components/container/container.component';\r\nimport { TableComponent } from './components/table/table.component';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\nimport { PERFECT_SCROLLBAR_CONFIG } from 'ngx-perfect-scrollbar';\r\nimport { PerfectScrollbarConfigInterface } from 'ngx-perfect-scrollbar';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { PaginatorComponent } from './components/paginator/paginator.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { UtilsService } from './services/utils.service';\r\nimport { ConfirmComponent } from './components/confirm/confirm.component';\r\nimport { PhotoComponent } from './components/photo/photo.component';\r\nimport { UploadDirective } from './directives/upload.directive';\r\nimport { WebcamModule } from 'ngx-webcam';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { KeypadComponent } from './components/keypad/keypad.component';\nimport { RolesAllowedDirective } from './directives/roles-allowed.directive';\r\n\r\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\r\n  //suppressScrollX: true,\r\n};\r\n@NgModule({\r\n  declarations: [\r\n    TitleComponent,\r\n    ContainerComponent,\r\n    TableComponent,\r\n    PaginatorComponent,\r\n    ConfirmComponent,\r\n    PhotoComponent,\r\n    UploadDirective,\r\n    KeypadComponent,\r\n    RolesAllowedDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    FlexLayoutModule,\r\n    WebcamModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  exports: [\r\n    TitleComponent,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    ContainerComponent,\r\n    TableComponent,\r\n    MatSidenavModule,\r\n    PerfectScrollbarModule,\r\n    PaginatorComponent,\r\n    MatDialogModule,\r\n    MatToolbarModule,\r\n    FlexLayoutModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTableModule,\r\n    PhotoComponent,\r\n    KeypadComponent,\r\n    RolesAllowedDirective,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: PERFECT_SCROLLBAR_CONFIG,\r\n      useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG,\r\n    },\r\n    UtilsService,\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UtilsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "UploadDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "PhotoComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-2ec4c9a01961966a4cfb98061b8bdf609667de9513cbeb7f7663ab5d27a528b6beb243cf4fedc99dbc91a355b5950a88a8eb159760a3e06e7b8cb822a4ed9455",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UserRoutingModule } from './user-routing.module';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\nimport { FormComponent } from './views/components/form/form.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { UserInfrastructure } from './infrastructure/user.infrastructure';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nconst components = [PageListComponent, FormComponent];\r\nconst modules = [\r\n  CommonModule,\r\n  UserRoutingModule,\r\n  SharedModule,\r\n  ReactiveFormsModule,\r\n  MatSelectModule,\r\n];\r\n\r\nconst infrastructure = [UserInfrastructure];\r\n\r\n@NgModule({\r\n  declarations: [...components],\r\n  imports: [...modules],\r\n  providers: [...infrastructure],\r\n})\r\nexport class UserModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserInfrastructure"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "TestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "id": "module-UserRoutingModule-f7c9ed26c097fb067d1a5a6ae1e84b7d3471b6af9da59238a31721a9e1bb118a4287bde808d05cb09134098f40733316d13d821f117a4fc21ad0b787a45e7553",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/sistema/src/app/user/user-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './views/pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UserRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "applications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  UserApplication,\r\n  AuthApplication,\r\n  StorageApplication,\r\n  MedicApplication,\r\n  DriverApplication,\r\n  RoleApplication,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[AppComponent, TestComponent]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  HeaderComponent,\r\n  SidebarComponent,\r\n  MenuComponent,\r\n  PageLoginComponent,\r\n  LoginComponent,\r\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[PageListComponent, FormComponent]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\r\n  //suppressScrollX: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 5,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/environments/environment.uat.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n}"
            },
            {
                "name": "exports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent]"
            },
            {
                "name": "imports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  BrowserModule,\r\n  AppRoutingModule,\r\n  HttpClientModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  MatIconModule,\r\n  LayoutModule.forRoot(layoutConstant),\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n]"
            },
            {
                "name": "imports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatMenuModule,\r\n  MatListModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  RouterModule,\r\n  FlexLayoutModule,\r\n  ReactiveFormsModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule,\r\n]"
            },
            {
                "name": "infrastructure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UserInfrastructure]"
            },
            {
                "name": "infrastructures",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  UserInfrastructure,\r\n  AuthInfrastructure,\r\n  StorageInfrastructure,\r\n  MedicInfrastructure,\r\n  DriverInfrastructure,\r\n  RoleInfrastructure,\r\n]"
            },
            {
                "name": "interceptors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LAYOUT_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('layoutToken')"
            },
            {
                "name": "layoutConstant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ILayout",
                "defaultValue": "{\r\n  hideHeader: false,\r\n  hideMenu: false,\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "material",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
            },
            {
                "name": "MetaData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/user/user.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  CommonModule,\r\n  UserRoutingModule,\r\n  SharedModule,\r\n  ReactiveFormsModule,\r\n  MatSelectModule,\r\n]"
            },
            {
                "name": "pdfFonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
            },
            {
                "name": "pdfMake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/pdfmake.js')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AuthProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/core/domain/auth.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DriverProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/driver/domain/driver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DriverUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/driver/domain/driver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "MedicProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/medic/domain/medic.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "MedicUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/medic/domain/medic.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "RoleProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/role/domain/role.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "RoleUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/role/domain/role.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UserProperties",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/sistema/src/app/user/domain/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "UserUpdate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "projects/sistema/src/app/user/domain/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "TypeExport",
                "childs": [
                    {
                        "name": "EXCEL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "excel"
                    },
                    {
                        "name": "PDF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pdf"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/sistema/src/app/shared/components/base/base-component.ts"
            }
        ],
        "groupedVariables": {
            "projects/sistema/src/app/app.module.ts": [
                {
                    "name": "applications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  UserApplication,\r\n  AuthApplication,\r\n  StorageApplication,\r\n  MedicApplication,\r\n  DriverApplication,\r\n  RoleApplication,\r\n]"
                },
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[AppComponent, TestComponent]"
                },
                {
                    "name": "imports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  BrowserModule,\r\n  AppRoutingModule,\r\n  HttpClientModule,\r\n  CoreModule,\r\n  BrowserAnimationsModule,\r\n  MatSidenavModule,\r\n  MatIconModule,\r\n  LayoutModule.forRoot(layoutConstant),\r\n  ReactiveFormsModule,\r\n  HttpClientModule,\r\n]"
                },
                {
                    "name": "infrastructures",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  UserInfrastructure,\r\n  AuthInfrastructure,\r\n  StorageInfrastructure,\r\n  MedicInfrastructure,\r\n  DriverInfrastructure,\r\n  RoleInfrastructure,\r\n]"
                },
                {
                    "name": "interceptors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n]"
                },
                {
                    "name": "material",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{ provide: MatPaginatorIntl, useClass: Paginator }]"
                }
            ],
            "projects/sistema/src/app/core/core.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  HeaderComponent,\r\n  SidebarComponent,\r\n  MenuComponent,\r\n  PageLoginComponent,\r\n  LoginComponent,\r\n]"
                },
                {
                    "name": "exports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[HeaderComponent, SidebarComponent, MenuComponent]"
                },
                {
                    "name": "imports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  MatToolbarModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatMenuModule,\r\n  MatListModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  RouterModule,\r\n  FlexLayoutModule,\r\n  ReactiveFormsModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule,\r\n]"
                }
            ],
            "projects/sistema/src/app/user/user.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[PageListComponent, FormComponent]"
                },
                {
                    "name": "infrastructure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UserInfrastructure]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/user/user.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  CommonModule,\r\n  UserRoutingModule,\r\n  SharedModule,\r\n  ReactiveFormsModule,\r\n  MatSelectModule,\r\n]"
                }
            ],
            "projects/sistema/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/sistema/src/app/shared/shared.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\r\n  //suppressScrollX: true,\r\n}"
                }
            ],
            "projects/sistema/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n}"
                }
            ],
            "projects/sistema/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 5,\r\n}"
                }
            ],
            "projects/sistema/src/environments/environment.uat.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/environments/environment.uat.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiUrl: 'https://api-cursoangular.cursos-dev.com',\r\n  pageSize: 30,\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts": [
                {
                    "name": "LAYOUT_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('layoutToken')"
                }
            ],
            "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts": [
                {
                    "name": "layoutConstant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayout",
                    "defaultValue": "{\r\n  hideHeader: false,\r\n  hideMenu: false,\r\n}"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "stories/Table.stories.ts": [
                {
                    "name": "MetaData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/sistema/src/app/shared/services/utils.service.ts": [
                {
                    "name": "pdfFonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
                },
                {
                    "name": "pdfMake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/pdfmake.js')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sistema/src/app/shared/services/utils.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/sistema/src/app/shared/components/base/base-component.ts": [
                {
                    "name": "TypeExport",
                    "childs": [
                        {
                            "name": "EXCEL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "excel"
                        },
                        {
                            "name": "PDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pdf"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/sistema/src/app/shared/components/base/base-component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/sistema/src/app/core/domain/auth.ts": [
                {
                    "name": "AuthProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/core/domain/auth.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/sistema/src/app/driver/domain/driver.ts": [
                {
                    "name": "DriverProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/driver/domain/driver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "DriverUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/driver/domain/driver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/medic/domain/medic.ts": [
                {
                    "name": "MedicProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/medic/domain/medic.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "MedicUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/medic/domain/medic.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/role/domain/role.ts": [
                {
                    "name": "RoleProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/role/domain/role.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "RoleUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/role/domain/role.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/sistema/src/app/user/domain/user.ts": [
                {
                    "name": "UserProperties",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/sistema/src/app/user/domain/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "UserUpdate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "projects/sistema/src/app/user/domain/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/sistema/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructures",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "interceptors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "material",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/constants/layout.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layoutConstant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/interfaces/layout.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILayout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/services/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LayoutService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/config/injections/layout/tokens/layout.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAYOUT_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/application/auth.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/application/storage.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageApplication",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthOptional",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRequired",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/storage.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/domain/tokens.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/infrastructure/auth.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/infrastructure/storage.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/core/views/pages/page-login/page-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/application/covid.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/application/socket.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketApplication",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/covid.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidModel",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/covid.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/graph.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Graph",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/domain/socket.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocketRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/infrastructure/covid.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CovidInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/infrastructure/socker.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/components/covid/covid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CovidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/components/socket/socket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SocketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/dashboard/views/pages/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/application/driver.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/application/driver.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDriverApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Driver",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverOptional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/domain/driver.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverRequired",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/infrastructure/driver.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/driver/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/history/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/history/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/application/medic.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/application/medic.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMedicApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Medic",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicOptional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/domain/medic.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicRequired",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/infrastructure/medic.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/medic/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/application/role.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/application/role.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRoleApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/domain/role.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RoleFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/domain/role.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/domain/role.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/domain/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleEssential",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/domain/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoleOptional",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/role/infrastructure/role.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/application/base-application.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/application/interface-application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IApplication",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/base/base-component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/keypad/keypad.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeypadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/photo/photo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/directives/roles-allowed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RolesAllowedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/directives/upload.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UploadDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/domain/base.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/infrastructure/base-infrastructure.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interface/result-page.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResultPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/interfaces/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/icon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/paginator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfFonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfMake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/services/utils.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/test/test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/application/user.application.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApplication",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user-factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserFactory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.repository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRepository",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserOptional",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/domain/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRequired",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/infrastructure/user.infrastructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserInfrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infrastructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/user.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/views/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/app/user/views/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/environments/environment.uat.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sistema/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MetaData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}